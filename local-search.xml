<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>密码综述</title>
    <link href="/2025/09/23/notes/"/>
    <url>/2025/09/23/notes/</url>
    
    <content type="html"><![CDATA[<h2 id="elgamal加密算法">ElGamal加密算法</h2><p><ahref="https://ctf-wiki.org/crypto/asymmetric/discrete-log/elgamal/">ElGamal- CTF Wiki</a></p><h3 id="euler-判别法">Euler 判别法</h3><p><ahref="https://oi-wiki.org/math/number-theory/quad-residue/#euler-判别法">二次剩余- OI Wiki</a></p><h3 id="legendre-符号">Legendre 符号</h3><p><ahref="https://oi-wiki.org/math/number-theory/quad-residue/#legendre-符号">二次剩余- OI Wiki</a></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF-格密码</title>
    <link href="/2025/09/23/NSSCTF-%E6%A0%BC%E5%AF%86%E7%A0%81/"/>
    <url>/2025/09/23/NSSCTF-%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="p1">P1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">1024</span>)<br><br>f = getPrime(<span class="hljs-number">400</span>)<br>g = getPrime(<span class="hljs-number">512</span>)<br>r = getPrime(<span class="hljs-number">400</span>)<br><br>h = inverse(f, p) * g % p<br><br>m = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(m)<br><br>c = (r*h + m) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;h = <span class="hljs-subst">&#123;h&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 170990541130074930801165526479429022133700799973347532191727614846803741888876816210632483231997413973919037199883422312436314365293577997262903161076615619596783971730864586404602951191341733308807254112018161897113881363794353050758324742415299277578203838160939521046655099610387485947145087271531951477031</span><br><span class="hljs-string">h = 19027613518333504891337723135627869008620752060390603647368919831595397216728378486716291001290575802095059192000315493444659485043387076261350378464749849058547797538347059869865169867814094180939070464336693973680444770599657132264558273692580535803622882040948521678860110391309880528478220088107038861065</span><br><span class="hljs-string">c = 75639016590286995205676932417759002029770539425113355588948888258962338419567264292295302442895077764630601149285564849867773180066274580635377957966186472159256462169691456995594496690536094824570820527164224000505303071962872595619159691416247971024761571538057932032549611221598273371855762399417419551483</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">170990541130074930801165526479429022133700799973347532191727614846803741888876816210632483231997413973919037199883422312436314365293577997262903161076615619596783971730864586404602951191341733308807254112018161897113881363794353050758324742415299277578203838160939521046655099610387485947145087271531951477031</span><br>h = <span class="hljs-number">19027613518333504891337723135627869008620752060390603647368919831595397216728378486716291001290575802095059192000315493444659485043387076261350378464749849058547797538347059869865169867814094180939070464336693973680444770599657132264558273692580535803622882040948521678860110391309880528478220088107038861065</span><br>c = <span class="hljs-number">75639016590286995205676932417759002029770539425113355588948888258962338419567264292295302442895077764630601149285564849867773180066274580635377957966186472159256462169691456995594496690536094824570820527164224000505303071962872595619159691416247971024761571538057932032549611221598273371855762399417419551483</span><br><br>M = matrix([[<span class="hljs-number">1</span>,h],<br>            [<span class="hljs-number">0</span>,-p]])<br><br>f,g = M.LLL()[<span class="hljs-number">1</span>]<br><br>m = (f*c) % p % g *inverse(f,g) % g<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># NSSCTF&#123;94068324-38bb-410b-b464-e1b8baf6b358&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p2">P2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = bytes_to_long(<span class="hljs-string">b&#x27;******&#x27;</span>)<br>flag = <span class="hljs-built_in">bin</span>(flag)[<span class="hljs-number">2</span>:]<br>n = <span class="hljs-built_in">len</span>(flag)<br><br>a = [random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>**n)]<br>s = a[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>    a.append(random.randint(s+<span class="hljs-number">1</span>, <span class="hljs-number">4</span>**(n+i)))<br>    s += a[i]<br><br>m = random.randint(a[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>*a[-<span class="hljs-number">1</span>])<br>w = random.randint(<span class="hljs-number">1</span>, m)<br><br><span class="hljs-keyword">assert</span> gcd(w, m) == <span class="hljs-number">1</span><br>b = [w*i % m <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>    c = (c + b[i]*<span class="hljs-built_in">int</span>(flag[i]))<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>, file=f)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>, file=f)<br></code></pre></td></tr></table></figure><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    output = f.readlines()<br><br>b =  <span class="hljs-built_in">eval</span>(output[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br>c =  <span class="hljs-built_in">eval</span>(output[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br><br>n = <span class="hljs-built_in">len</span>(b)<br><br>L = matrix(ZZ,n+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    L[i,i] = <span class="hljs-number">1</span><br>    L[i,-<span class="hljs-number">1</span>]=b[i]<br><br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = -c<br><br>res = L.LLL()<br><br>row = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    row = res.row(i).<span class="hljs-built_in">list</span>()<br>    key = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-keyword">if</span> i!= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i!= <span class="hljs-number">1</span>:<br>            key = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> key:<br>        <span class="hljs-keyword">break</span><br><br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,row[:-<span class="hljs-number">1</span>])),<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># NSSCTF&#123;4f7695b9-e026-4e9e-b456-bcf5&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p3">P3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(flag)<br><br>a = getPrime(<span class="hljs-number">1024</span>)<br>b = getPrime(<span class="hljs-number">1536</span>)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>r = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">14</span>, <span class="hljs-number">2</span>**<span class="hljs-number">15</span>)<br><span class="hljs-keyword">assert</span> ((p-r) * a + q) % b &lt; <span class="hljs-number">50</span><br><br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, p*q)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 78168998533427639204842155877581577797354503479929547596593341570371249960925614073689003464816147666662937166442652068942931518685068382940712171137636333670133426565340852055387100597883633466292241406019919037053324433086548680586265243208526469135810446004349904985765547633536396188822210185259239807712</span><br><span class="hljs-string">a = 134812492661960841508904741709490501744478747431860442812349873283670029478557996515894514952323891966807395438595833662645026902457124893765483848187664404810892289353889878515048084718565523356944401254704006179297186883488636493997227870769852726117603572452948662628907410024781493099700499334357552050587</span><br><span class="hljs-string">b = 1522865915656883867403482317171460381324798227298365523650851184567802496240011768078593938858595296724393891397782658816647243489780661999411811900439319821784266117539188498407648397194849631941074737391852399318951669593881907935220986282638388656503090963153968254244131928887025800088609341714974103921219202972691321661198135553928411002184780139571149772037283749086504201758438589417378336940732926352806256093865255824803202598635567105242590697162972609</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br>c = <span class="hljs-number">78168998533427639204842155877581577797354503479929547596593341570371249960925614073689003464816147666662937166442652068942931518685068382940712171137636333670133426565340852055387100597883633466292241406019919037053324433086548680586265243208526469135810446004349904985765547633536396188822210185259239807712</span><br>a = <span class="hljs-number">134812492661960841508904741709490501744478747431860442812349873283670029478557996515894514952323891966807395438595833662645026902457124893765483848187664404810892289353889878515048084718565523356944401254704006179297186883488636493997227870769852726117603572452948662628907410024781493099700499334357552050587</span><br>b = <span class="hljs-number">1522865915656883867403482317171460381324798227298365523650851184567802496240011768078593938858595296724393891397782658816647243489780661999411811900439319821784266117539188498407648397194849631941074737391852399318951669593881907935220986282638388656503090963153968254244131928887025800088609341714974103921219202972691321661198135553928411002184780139571149772037283749086504201758438589417378336940732926352806256093865255824803202598635567105242590697162972609</span><br><br>M = matrix([[<span class="hljs-number">1</span>,a],<br>            [<span class="hljs-number">0</span>,b]])<br><br>res = M.LLL()<br><br>pp,qq=<span class="hljs-built_in">abs</span>(res[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<span class="hljs-built_in">abs</span>(res[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> trange(<span class="hljs-number">2</span>**<span class="hljs-number">14</span>,<span class="hljs-number">2</span>**<span class="hljs-number">15</span>):<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        p = pp + r<br>        q = qq + h<br>        phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> GCD(<span class="hljs-number">65537</span>,phi) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        d = inverse(<span class="hljs-number">65537</span>,phi)<br>        m = <span class="hljs-built_in">pow</span>(c,d,p*q)<br><br>        flag = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br>            exit()<br><br><span class="hljs-comment"># NSSCTF&#123;0fc9dee6-ebfb-40bd-b800-b3ebe440be70&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p4">P4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>flag = bytes_to_long(flag)<br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>r = getPrime(<span class="hljs-number">175</span>)<br>a = inverse(r, p)<br>a = (a*flag) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 79047880584807269054505204752966875903807058486141783766561521134845058071995038638934174701175782152417081883728635655442964823110171015637136681101856684888576194849310180873104729087883030291173114003115983405311162152717385429179852150760696213217464522070759438318396222163013306629318041233934326478247</span><br><span class="hljs-string">p = 90596199661954314748094754376367411728681431234103196427120607507149461190520498120433570647077910673128371876546100672985278698226714483847201363857703757534255187784953078548908192496602029047268538065300238964884068500561488409356401505220814317044301436585177722826939067622852763442884505234084274439591</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a = <span class="hljs-number">79047880584807269054505204752966875903807058486141783766561521134845058071995038638934174701175782152417081883728635655442964823110171015637136681101856684888576194849310180873104729087883030291173114003115983405311162152717385429179852150760696213217464522070759438318396222163013306629318041233934326478247</span><br>p = <span class="hljs-number">90596199661954314748094754376367411728681431234103196427120607507149461190520498120433570647077910673128371876546100672985278698226714483847201363857703757534255187784953078548908192496602029047268538065300238964884068500561488409356401505220814317044301436585177722826939067622852763442884505234084274439591</span><br><br>b = <span class="hljs-number">2</span> ^ <span class="hljs-number">0</span><br>L = matrix([[<span class="hljs-number">1</span>,a*b],<br>            [<span class="hljs-number">0</span>,-p*b]])<br><br>res = L.LLL()<br><br><span class="hljs-keyword">if</span> res:<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>        f = r[<span class="hljs-number">1</span>]<br>        m = long_to_bytes(f)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(m)<br>            exit()<br><span class="hljs-comment"># NSSCTF&#123;e572546b-abb5-4358-8970-471abc12b7ef&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p5">P5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(flag)<br><br><span class="hljs-keyword">assert</span> m.bit_length() == <span class="hljs-number">351</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>b = getPrime(<span class="hljs-number">1024</span>)<br>c = getPrime(<span class="hljs-number">400</span>)<br><br>a = (b*m + c) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 92716521851427599147343828266552451834533034815416003395170301819889384044273026852184291232938197215198124164263722270347104189412921224361134013717269051168246275213624264313794650441268405062046423740836145678559969020294978939553573428334198212792931759368218132978344815862506799287082760307048309578592</span><br><span class="hljs-string">b = 155530728639099361922541063573602659584927544589739208888076194504495146661257751801481540924821292656785953391450218803112838556107960071792826902126414012831375547340056667753587086997958522683688746248661290255381342148052513971774612583235459904652002495564523557637169529882928308821019659377248151898663</span><br><span class="hljs-string">p = 100910862834849216140965884888425432690937357792742349763319405418823395997406883138893618605587754336982681610768197845792843123785451070312818388494074168909379627989079148880913190854232917854414913847526564520719350308494462584771237445179797367179905414074344416047541423116739621805238556845903951985783</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a = <span class="hljs-number">92716521851427599147343828266552451834533034815416003395170301819889384044273026852184291232938197215198124164263722270347104189412921224361134013717269051168246275213624264313794650441268405062046423740836145678559969020294978939553573428334198212792931759368218132978344815862506799287082760307048309578592</span><br>b = <span class="hljs-number">155530728639099361922541063573602659584927544589739208888076194504495146661257751801481540924821292656785953391450218803112838556107960071792826902126414012831375547340056667753587086997958522683688746248661290255381342148052513971774612583235459904652002495564523557637169529882928308821019659377248151898663</span><br>p = <span class="hljs-number">100910862834849216140965884888425432690937357792742349763319405418823395997406883138893618605587754336982681610768197845792843123785451070312818388494074168909379627989079148880913190854232917854414913847526564520719350308494462584771237445179797367179905414074344416047541423116739621805238556845903951985783</span><br>k = <span class="hljs-number">2</span>^<span class="hljs-number">400</span><br><br>L = matrix([[k,<span class="hljs-number">0</span>,a],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-b],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])<br><br>res = L.LLL()<br><br><span class="hljs-keyword">if</span> res:<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>        m = long_to_bytes(<span class="hljs-built_in">abs</span>(r[<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment"># NSSCTF&#123;ee5cb1a5-257a-48b0-9d62-9ef56ff0651a&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p6">P6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>flag = bytes_to_long(flag)<br>d = getPrime(<span class="hljs-number">400</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    e = inverse(d, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    c = <span class="hljs-built_in">pow</span>(flag, e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e<span class="hljs-subst">&#123;i&#125;</span> =&#x27;</span>, e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n<span class="hljs-subst">&#123;i&#125;</span> =&#x27;</span>, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c<span class="hljs-subst">&#123;i&#125;</span> =&#x27;</span>, c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">e0 = 14663634286442041092028764808273515750847961898014201055608982250846018719684424125895815390624536073501623753618354026800118456911536861815261996929625814961086913500837475340797921236556312296934664701095834187857404704711288771338418177336783911864595983563560080719582434186801068157426993026446515265411</span><br><span class="hljs-string">n0 = 104543450623548393448505960506840545298706691237630183178416927557780858213264769135818447427794932329909731890957245926915280713988801182894888947956846369966245947852409172099018409057129584780443712258590591272371802134906914886744538889099861890573943377480028655951935894660286388060056770675084677768397</span><br><span class="hljs-string">c0 = 66400441793466385558399002350812383744096354576421495899465166492721568297592616443643465864544107914461044325088868615645524260480104397769130582397209585192620565774001015221725536884170662700337565613181799442382460047295553807602785067421981837709831158111951991854109179278733629950271657405211417740374</span><br><span class="hljs-string">e1 = 62005504700456859456675572895620453845623573672275890584145949847469951381521709553504593023003977393014834639251022203398533914340078480147377747715528821418445514563871411209895815634752533151145061594791024551625615960423026244560340983481137777162236719939420428613005457949228517914830194749293637917667</span><br><span class="hljs-string">n1 = 89410873947410184231222334229470195622685051370058935269198780539059522679122059486414591834635266301335656798768270022060656655274640699951736588085471509424575027153387518893978494158981314217195561629375189515702124478687925014362857206223379284909134299260355456357407022417434961226383007916607728238843</span><br><span class="hljs-string">c1 = 75133250536426006056029454024900058936095761927174304108454764308417889983571094946046507426319589437822458959089546795698076608690695326741772662156830944126301658579142020817338297043884836598263468494533324693019866746045910394812656639124276516075062088756043949581789436307373276242558429450971458945061</span><br><span class="hljs-string">e2 = 5365316217065391632204029784515519544882379449147835081003675696051077792179684123668298103660153980837519314114793091112163153158510344440829742753002176560016265852613076363394396640641504813912550948776926622696268531691467015580417575287779607009068332802842890478748171958455354463809356050553832863427</span><br><span class="hljs-string">n2 = 53325942266099921615667538877103327425435396909592382386684073177331528393295928518724880712900970020425481561110366696624090824641115147978830715508666547064446891727446073538022824237798568413003419382767587742032676311751819789672319289920011033523044026418650515529084031754775286163358926609712626506433</span><br><span class="hljs-string">c2 = 22289960513520782629306709529908652726794465066357062923684089176607114605563538085483920152508469429311012652149406853144200001391310165612163442404181970125704785325670969551080086517236489885046039799676581310781945432599048686184762485374030278657826206433571162451649808912276118945302558580745346371321</span><br><span class="hljs-string">e3 = 57257245945110486431680573908783487217316546039634811903637650579658516537372808464426294780698320301497615457264001148504941375058983426920721566040576604013497311914160175024860226623138659970105781812246471618831032554729317463745699993647224910498474869868186318188994237457335796911524629938029123055027</span><br><span class="hljs-string">n3 = 97233843381238063550322854422952777734101562842513647224354265328843953949189054347560960321126304504554067163501318212533606313039536188796999575130115659250566231010092273206623114900781284076452654791214088764465615154940874231056251107863895697778665275804663487113266180838319536762473697586368100928379</span><br><span class="hljs-string">c3 = 56606672064789484727896188434430896229911224588055894584797861263107870392831242138537980507537270618683458635389444257040355313948352917061971042629958646854593628522401074068536976581232979947149230764268377747754284783531803366391759725774562719884482404532619163798580872386794273190532863916038929461465</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><p><img src="316f751e-7af1-4aad-8d0f-79f846b123db.png" /></p><p><img src="1d10a8b9-2e73-4200-b1be-087b6fa1ab66.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e0 = <span class="hljs-number">14663634286442041092028764808273515750847961898014201055608982250846018719684424125895815390624536073501623753618354026800118456911536861815261996929625814961086913500837475340797921236556312296934664701095834187857404704711288771338418177336783911864595983563560080719582434186801068157426993026446515265411</span><br>n0 = <span class="hljs-number">104543450623548393448505960506840545298706691237630183178416927557780858213264769135818447427794932329909731890957245926915280713988801182894888947956846369966245947852409172099018409057129584780443712258590591272371802134906914886744538889099861890573943377480028655951935894660286388060056770675084677768397</span><br>c0 = <span class="hljs-number">66400441793466385558399002350812383744096354576421495899465166492721568297592616443643465864544107914461044325088868615645524260480104397769130582397209585192620565774001015221725536884170662700337565613181799442382460047295553807602785067421981837709831158111951991854109179278733629950271657405211417740374</span><br>e1 = <span class="hljs-number">62005504700456859456675572895620453845623573672275890584145949847469951381521709553504593023003977393014834639251022203398533914340078480147377747715528821418445514563871411209895815634752533151145061594791024551625615960423026244560340983481137777162236719939420428613005457949228517914830194749293637917667</span><br>n1 = <span class="hljs-number">89410873947410184231222334229470195622685051370058935269198780539059522679122059486414591834635266301335656798768270022060656655274640699951736588085471509424575027153387518893978494158981314217195561629375189515702124478687925014362857206223379284909134299260355456357407022417434961226383007916607728238843</span><br>c1 = <span class="hljs-number">75133250536426006056029454024900058936095761927174304108454764308417889983571094946046507426319589437822458959089546795698076608690695326741772662156830944126301658579142020817338297043884836598263468494533324693019866746045910394812656639124276516075062088756043949581789436307373276242558429450971458945061</span><br>e2 = <span class="hljs-number">5365316217065391632204029784515519544882379449147835081003675696051077792179684123668298103660153980837519314114793091112163153158510344440829742753002176560016265852613076363394396640641504813912550948776926622696268531691467015580417575287779607009068332802842890478748171958455354463809356050553832863427</span><br>n2 = <span class="hljs-number">53325942266099921615667538877103327425435396909592382386684073177331528393295928518724880712900970020425481561110366696624090824641115147978830715508666547064446891727446073538022824237798568413003419382767587742032676311751819789672319289920011033523044026418650515529084031754775286163358926609712626506433</span><br>c2 = <span class="hljs-number">22289960513520782629306709529908652726794465066357062923684089176607114605563538085483920152508469429311012652149406853144200001391310165612163442404181970125704785325670969551080086517236489885046039799676581310781945432599048686184762485374030278657826206433571162451649808912276118945302558580745346371321</span><br>e3 = <span class="hljs-number">57257245945110486431680573908783487217316546039634811903637650579658516537372808464426294780698320301497615457264001148504941375058983426920721566040576604013497311914160175024860226623138659970105781812246471618831032554729317463745699993647224910498474869868186318188994237457335796911524629938029123055027</span><br>n3 = <span class="hljs-number">97233843381238063550322854422952777734101562842513647224354265328843953949189054347560960321126304504554067163501318212533606313039536188796999575130115659250566231010092273206623114900781284076452654791214088764465615154940874231056251107863895697778665275804663487113266180838319536762473697586368100928379</span><br>c3 = <span class="hljs-number">56606672064789484727896188434430896229911224588055894584797861263107870392831242138537980507537270618683458635389444257040355313948352917061971042629958646854593628522401074068536976581232979947149230764268377747754284783531803366391759725774562719884482404532619163798580872386794273190532863916038929461465</span><br><br>M = isqrt(n0)<br>L = Matrix(ZZ,[<br>            [M,e0,e1,e2,e3],<br>            [<span class="hljs-number">0</span>,-n0,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n1,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n2,<span class="hljs-number">0</span>],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n3]])<br>res = L.LLL()<br><br><span class="hljs-keyword">if</span> res:<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>        d = (r[<span class="hljs-number">0</span>])//M<br>        m = long_to_bytes(<span class="hljs-built_in">pow</span>(c0,d,n0))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(m)<br><br><span class="hljs-comment"># NSSCTF&#123;12514adb-2c14-4777-96ff-90e95bc2b5cb&#125;</span><br></code></pre></td></tr></table></figure><h2 id="p7">P7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>flag = bytes_to_long(flag)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(flag, <span class="hljs-number">65537</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n =&#x27;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c =&#x27;</span>, c)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    d = getPrime(<span class="hljs-number">350</span>)<br>    e = inverse(d, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e<span class="hljs-subst">&#123;i&#125;</span> =&#x27;</span>, e)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 110697784133988071803253124431092603234028687101567047811203431433689306543322837414808117411806181193598553341878079973980865551938790090419082150555675782822484149943421418447579383449269148197087985041351210982545320569973241390962326458234562044133505940521052500278777242988196544039226173227204865907343</span><br><span class="hljs-string">c = 3281096209929505523196793672137624804022934270452947405454462490250571524417033484978613243658208567511735641542935158434165363547355697159503378251318054879687577130170122911449101189974762808655638497967674004219512386442280269940950792767174561412932638740423542930763914255112354969122157915514816022159</span><br><span class="hljs-string">e0 = 28562806554366667733480283991307446762365777397933141571728113235368201162305126722188842319240464207580134816039095093401651171977877327756351539588974913736802534970867173212883308325913939353140276201705478124488858328502643345172188729914731042179091733244225184522680724392375975935305371163502863968963</span><br><span class="hljs-string">e1 = 28572469216883232254074869113744730984165641173439644880182528671699871929340616919028955398474678696802739685594548793470261306125219888911330937557582939811068530294470712859439149735950996866732508004061234613146407591546995439312326450834903885979660916965052092661398640105827442036234500556755520316031</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><p>拓展维纳攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">110697784133988071803253124431092603234028687101567047811203431433689306543322837414808117411806181193598553341878079973980865551938790090419082150555675782822484149943421418447579383449269148197087985041351210982545320569973241390962326458234562044133505940521052500278777242988196544039226173227204865907343</span><br>c = <span class="hljs-number">3281096209929505523196793672137624804022934270452947405454462490250571524417033484978613243658208567511735641542935158434165363547355697159503378251318054879687577130170122911449101189974762808655638497967674004219512386442280269940950792767174561412932638740423542930763914255112354969122157915514816022159</span><br>e0 = <span class="hljs-number">28562806554366667733480283991307446762365777397933141571728113235368201162305126722188842319240464207580134816039095093401651171977877327756351539588974913736802534970867173212883308325913939353140276201705478124488858328502643345172188729914731042179091733244225184522680724392375975935305371163502863968963</span><br>e1 = <span class="hljs-number">28572469216883232254074869113744730984165641173439644880182528671699871929340616919028955398474678696802739685594548793470261306125219888911330937557582939811068530294470712859439149735950996866732508004061234613146407591546995439312326450834903885979660916965052092661398640105827442036234500556755520316031</span><br><br>a = <span class="hljs-number">5</span>/<span class="hljs-number">14</span><br>D = diagonal_matrix(ZZ,[n, <span class="hljs-built_in">int</span>(n^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)),<span class="hljs-built_in">int</span>(n^(<span class="hljs-number">1</span>+a)),<span class="hljs-number">1</span>])<br>M = matrix(ZZ,[<br>            [<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>],<br>            [<span class="hljs-number">0</span>,e0,-e0,-e0*n],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1,-e1*n],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e0*e1]])*D<br><br>L = M.LLL()<br>t = vector(ZZ,L[<span class="hljs-number">0</span>])<br>x = t * M^(-<span class="hljs-number">1</span>)<br><br>phi = <span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>]*e0)<br><br>d = inverse(<span class="hljs-number">65537</span>,phi)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-comment"># NSSCTF&#123;00121664-7e76-4f6f-a2f7-4813e21ff4aa&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="p8">P8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(flag)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>s = [getPrime(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a = [getPrime(<span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><br>c = (a[<span class="hljs-number">0</span>]*s[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>*s[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span> + a[<span class="hljs-number">1</span>]*s[<span class="hljs-number">0</span>]*s[<span class="hljs-number">2</span>]**<span class="hljs-number">2</span> + a[<span class="hljs-number">2</span>]*s[<span class="hljs-number">1</span>]*s[<span class="hljs-number">2</span>]) % p<br><br>flag = m*s[<span class="hljs-number">0</span>]*s[<span class="hljs-number">1</span>]*s[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;flag = <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 740925064346371394698186587854547113606276228956443989781507592148712696471120454242180757282913190509143771235457885619359315384722931529795071829165028</span><br><span class="hljs-string">flag = 68803130911709451943985629442913968356735244797651554293510331427148284907075221530061581131130283569506280604032687824733336171953927</span><br><span class="hljs-string">a = [8205051800134728054685810600921116779466017139080528864745521629232854690213051609775306424843961090482436503418278207286549634492623172279113808752825877, 7656695314164580223033364292542508972053206838456547579023164583502640699225283686572923544677077467571265812610524520719197913305928971777756847148151453, 12016313094941119621096276870216129960285946825332008187797823075795491053640261786033376211694851951499688886358239835607622191418940486434225440651886891]</span><br><span class="hljs-string">p = 9725369974716521164256395525866212215114818770667579116304398350357785690930260317036889742178436308598088096925530431498664796728861093872628194022265573</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Exp:</p><p><img src="916fb67f-d9e9-4d75-8cdd-69129238943b.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c = <span class="hljs-number">740925064346371394698186587854547113606276228956443989781507592148712696471120454242180757282913190509143771235457885619359315384722931529795071829165028</span><br>f = <span class="hljs-number">68803130911709451943985629442913968356735244797651554293510331427148284907075221530061581131130283569506280604032687824733336171953927</span><br>a = [<span class="hljs-number">8205051800134728054685810600921116779466017139080528864745521629232854690213051609775306424843961090482436503418278207286549634492623172279113808752825877</span>, <span class="hljs-number">7656695314164580223033364292542508972053206838456547579023164583502640699225283686572923544677077467571265812610524520719197913305928971777756847148151453</span>, <span class="hljs-number">12016313094941119621096276870216129960285946825332008187797823075795491053640261786033376211694851951499688886358239835607622191418940486434225440651886891</span>]<br>p = <span class="hljs-number">9725369974716521164256395525866212215114818770667579116304398350357785690930260317036889742178436308598088096925530431498664796728861093872628194022265573</span><br><br>d = <span class="hljs-number">2</span>^<span class="hljs-number">32</span><br>aa = inverse(a[<span class="hljs-number">2</span>],p)<br>D = diagonal_matrix(ZZ,[<span class="hljs-number">1</span>,d,d^<span class="hljs-number">4</span>,d^<span class="hljs-number">2</span>])<br><br>M = matrix(ZZ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">0</span>]*aa%p],<br>                [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">1</span>]*aa%p],<br>                [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-c*aa %p],<br>                [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])*D<br>res = M.LLL()<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>    s0s1 = isqrt(<span class="hljs-built_in">abs</span>(r[<span class="hljs-number">0</span>]))<br>    s1s2 = <span class="hljs-built_in">abs</span>(r[<span class="hljs-number">3</span>]) &gt;&gt; <span class="hljs-number">64</span><br>    s1 = GCD(s0s1, s1s2)<br>    s0 = s0s1 // s1<br>    s2 = s1s2 // s1<br>    flag = long_to_bytes(f//(s0*s1*s2))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># NSSCTF&#123;30636075-1942-49e7-acf2-721e3b587188&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>Lattice</tag>
      
      <tag>train</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LZCTF2025</title>
    <link href="/2025/09/23/LZCTF2025/"/>
    <url>/2025/09/23/LZCTF2025/</url>
    
    <content type="html"><![CDATA[<h2 id="crypto">CRYPTO</h2><h3 id="baby_rsa1">baby_RSA1</h3><p>yafu分解n得到p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">4511491</span><br>q = <span class="hljs-number">473398607161</span><br>e = <span class="hljs-number">19</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;LZCTF&#123;&#x27;</span>+<span class="hljs-built_in">str</span>(inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)))+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment">#LZCTF&#123;2023326077889096379&#125;</span><br></code></pre></td></tr></table></figure><h3 id="baby_rsa2">baby_RSA2</h3><p>p-1与q-1有大公因子，r接近1/2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">try</span>:<br>    gcd<br><span class="hljs-keyword">except</span> NameError:<br>    <span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rho</span>(<span class="hljs-params">N</span>):<br>    f = <span class="hljs-keyword">lambda</span> x: (<span class="hljs-built_in">pow</span>(x, N-<span class="hljs-number">1</span>, N) + <span class="hljs-number">3</span>) % N<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        t = random.randint(<span class="hljs-number">2</span>, N)<br>        h = f(t)<br>        step_times = <span class="hljs-number">0</span><br>        step_limit = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> step_times &lt; step_limit:<br>                step_times = <span class="hljs-number">0</span><br>                step_limit *= <span class="hljs-number">2</span><br>                t = h<br>                h = f(h)<br>            p = gcd(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(t) - <span class="hljs-built_in">int</span>(h)), N)<br>            <span class="hljs-keyword">if</span> p == N:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> p &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> (p, N // p)<br>            <span class="hljs-keyword">else</span>:<br>                h = f(h)<br>                step_times += <span class="hljs-number">1</span><br><br>p,q=rho(<span class="hljs-number">85506307179971345340573076298550920202050478522625049159869967159111928076600526030716602184667357077017298325347284339017988664271003344334793438409286753700312305433795917510554976379526043584238937850357500061114283285663795372182176438870325874623093086378492909249854224565645790634816064004980353927339</span>)<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">85506307179971345340573076298550920202050478522625049159869967159111928076600526030716602184667357077017298325347284339017988664271003344334793438409286753700312305433795917510554976379526043584238937850357500061114283285663795372182176438870325874623093086378492909249854224565645790634816064004980353927339</span><br>e = <span class="hljs-number">43607</span><br>c = <span class="hljs-number">68328014893597066623399349398360593182413091005605015946953295199952206497756677637500669249013782647067938648822032536367228947314586981293553305067650790694832721627038265994289720151984888941279636426367917794666376911337568705513834836696396821589786928534416507370206499538258635478332286049006280738334</span><br><br><span class="hljs-keyword">assert</span> p*q==n <br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)), p*q)))<br><span class="hljs-comment"># b&quot;LZCTF&#123;POL14RD&#x27;5_rhO_@19ORITHm_i5_eFfI3NC7&#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="baby_rsa3">baby_RSA3</h3><p>p,q高位剪枝，再coppersmith低200位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">18533990774081566897552566974262097416460295871064804716373477024458224583522146855795204088818577499983520478103695933066516427066168181562414247509838099162181918528079086808226654604433995649076665294969782084669933927159454550871793142158829962300169809318365892055515646987531642336954765598527590522427799703483495093933794419314821614565957860695602543483221366210619570810159771730145263874453729964655090920499220891262725136545941883135824095492047785480934566560350995537806977473860830360480078523477495159622804146945417715254386041023406698198040669055126009408685953639669289579101769142130296613107591</span><br>gift = <span class="hljs-number">42089255107159644583243254598992173546231159197860225956184289942731016232048934241123609827471609802766849625026279691927614648402900660432266990311919092764372302457083612513044459849201763773868157045807629807005100889882669587731744668236728455</span><br>c = <span class="hljs-number">535090531842740167243170702307390311291418643839953177643033139688308288048493882840030210480697107197195866097337989494938593681295268305213202491239077700948212854458878557554149377025747886069438127094984221317976417891714763155456795259109436887901296931886835427960445871705831446950463087754746896991672464282855314609785006828445084507077109236184885281019216321163984730055041891629599140899243888109990514225470827365484173158535001369482072321937262615267964012363537100865187587392137138811523904739819588617917058206346220437709132474051417974788177837958025460255179655794332495569438305627298928356457</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(gift).bit_length())<br>xor_p_q = <span class="hljs-built_in">bin</span>(gift)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">824</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(xor_p_q))<br><span class="hljs-built_in">print</span>(xor_p_q)<br>p_count = []<br>bit = <span class="hljs-number">824</span><br><br><span class="hljs-built_in">print</span>(n.bit_length())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">p,q</span>):<br>    length = <span class="hljs-built_in">len</span>(p)<br>    p_min = p + <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">1024</span>-length)<br>    p_max = p + <span class="hljs-string">&#x27;1&#x27;</span>*(<span class="hljs-number">1024</span>-length)<br>    q_min = q + <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">1024</span>-length)<br>    q_max = q + <span class="hljs-string">&#x27;1&#x27;</span>*(<span class="hljs-number">1024</span>-length)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(p_min,<span class="hljs-number">2</span>) &lt; <span class="hljs-built_in">int</span>(q_min,<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(p_min,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(q_min,<span class="hljs-number">2</span>) &gt; n:<br>        <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(p_max,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(q_max,<span class="hljs-number">2</span>) &lt; n:<br>        <span class="hljs-keyword">return</span> <br>    <br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">824</span>:<br>        p_count.append(<span class="hljs-built_in">int</span>(p,<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> xor_p_q[length]==<span class="hljs-string">&quot;0&quot;</span>:<br>            find(p+<span class="hljs-string">&quot;0&quot;</span>,q+<span class="hljs-string">&quot;0&quot;</span>)<br>            find(p+<span class="hljs-string">&quot;1&quot;</span>,q+<span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            find(p+<span class="hljs-string">&quot;0&quot;</span>,q+<span class="hljs-string">&quot;1&quot;</span>)<br>            find(p+<span class="hljs-string">&quot;1&quot;</span>,q+<span class="hljs-string">&quot;0&quot;</span>)<br><br>p = <span class="hljs-string">&quot;&quot;</span><br>q = <span class="hljs-string">&quot;&quot;</span><br>find(p,q)<br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(p_count,leave=<span class="hljs-string">&quot;true&quot;</span>):<br>    f = i*(<span class="hljs-number">2</span>^<span class="hljs-number">200</span>) + x<br>    f = f.monic()<br>    result = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">201</span>,beta=<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> result:<br>        p = <span class="hljs-built_in">int</span>(f(result[<span class="hljs-number">0</span>]))<br>        q = n//p<br>        <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(<span class="hljs-number">65537</span>,<span class="hljs-built_in">int</span>((p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))),n)))<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># b&#x27;LZCTF&#123;62ff69bc-e121-454a-9d80-347066af9b80&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="do_you_know_factor">Do_you_know_factor</h3><p>调用factordb的api对n进行分解查询，当分解结果有两位并且均128bits的时候就是p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>PKEY = <span class="hljs-number">50996360358591058519231936875020349959831130775354958086708907272224566458331</span><br>ENC = <span class="hljs-number">149917270740249846070888582165796880841173145322459848679460751820343617381</span><br>c_high = ENC&lt;&lt;<span class="hljs-number">8</span><br>n_high = (PKEY&gt;&gt;<span class="hljs-number">8</span>)&lt;&lt;<span class="hljs-number">8</span><br>e_high = (PKEY &amp; (<span class="hljs-number">2</span>**<span class="hljs-number">8</span>-<span class="hljs-number">1</span>))&lt;&lt;<span class="hljs-number">8</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor_n</span>(<span class="hljs-params">n</span>):<br>    url = <span class="hljs-string">&quot;http://factordb.com/api?query=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(n))<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        fac = response.json()[<span class="hljs-string">&#x27;factors&#x27;</span>]<br>        fac_data = [<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fac]<br>        <span class="hljs-keyword">return</span> fac_data<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>p_q = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>):<br>    n = n_high+i<br>    fac_data = factor_n(n)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(fac_data)==<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">if</span> fac_data[<span class="hljs-number">0</span>].bit_length()==<span class="hljs-number">128</span> <span class="hljs-keyword">and</span> fac_data[<span class="hljs-number">1</span>].bit_length()==<span class="hljs-number">128</span> <span class="hljs-keyword">and</span> isPrime(fac_data[<span class="hljs-number">0</span>]) <span class="hljs-keyword">and</span> isPrime(fac_data[<span class="hljs-number">1</span>]):<br>            p_q = fac_data<br>            <span class="hljs-keyword">break</span><br>p,q = <span class="hljs-built_in">int</span>(fac_data[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(fac_data[<span class="hljs-number">1</span>])<br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>):<br>        c = c_high + i<br>        e = e_high + j<br>        <span class="hljs-keyword">if</span> isPrime(e):<br>            <span class="hljs-keyword">try</span>:<br>                d = gmpy2.invert(e, phi)<br>                m = <span class="hljs-built_in">pow</span>(c,d,n)<br>                flag = long_to_bytes(m)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(k&lt;=<span class="hljs-number">127</span> <span class="hljs-keyword">and</span> k &gt;=<span class="hljs-number">33</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> flag):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">b&quot;LZCTF&#123;&quot;</span>+flag+<span class="hljs-string">b&quot;&#125;&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># b&#x27;LZCTF&#123;f@C7OR_I7!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="smooth">Smooth</h3><p>p-1和q-1光滑+离散对数（CRT）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a = <span class="hljs-number">2</span><br>n = <span class="hljs-number">2</span><br>N =<span class="hljs-number">56967102676346815408343874856836051984486997911462792815888426625782789674448496737568928459807745408501199292247437221316473537422310413322217963252103157597835340862804343591928487949009552264961201767328922731921539776469249475995285462420869151827003355142463635248173553082174775682494899477341</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a = <span class="hljs-built_in">pow</span>(a, n, N)<br>    res = GCD(a-<span class="hljs-number">1</span>, N)<br>    <span class="hljs-keyword">if</span> res != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> res != N:<br>        q = N // res<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,res)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br>        <span class="hljs-keyword">break</span><br>    n += <span class="hljs-number">1</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p= <span class="hljs-number">1569583007727469646320106699006883952880643533050399258106042200627613911491386033003301795784812918452232653328628527756095365113713795095198954586071</span><br>q= <span class="hljs-number">36294418578617886095375401554783457088387456693400632587167630115333816990093459421711328568372947712284776400063017607732278627138744903508750395371</span><br><br>c_1 = <span class="hljs-number">33074792071449086224114814703708843481389095793091562008464759764178413125388758744628590569869218695818323865944327000709040910061593695089113913785753372154238993698427170939964518499360382358242068705549469991284880316789504232558380660667898760105739982870841503013939242347681568529360218427555</span><br>c_2 = <span class="hljs-number">39009674283046620472345718972417867788587693901920798006010342993567931591776398720380199723310244431905108686389809230430272689978916365374896542294350722451098585295701885565180474927517518583938563436272470923659959529268632190305834904190601486839276361945866759259432037346167176170371096371550</span><br>e = <span class="hljs-number">0x10001</span><br>n=p*q<br><br>Zp, Zq = Zmod(p), Zmod(q)<br>d = inverse_mod(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m_1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c_1, d, n))<br><span class="hljs-built_in">print</span>(long_to_bytes(m_1).decode(),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>m_2p = discrete_log(Zp(c_2), Zp(e))<br>m_2q = discrete_log(Zq(c_2), Zq(e))<br>m_2 = crt([m_2p, m_2q], [p-<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(long_to_bytes(m_2p).decode())<br><span class="hljs-comment"># LZCTF&#123;SMo0th_NumbEr_I5_v3Ry_DAnGERoU5&#125;</span><br></code></pre></td></tr></table></figure><h2 id="misc">MISC</h2><h3 id="warmlight不会协议分析">warmlight不会协议分析</h3><p>寻找smb登录成功的session setup</p><p>对smb2流量按长度排序找到对象，再按时间排序</p><figure><img src="image0.png" alt="image0" /><figcaption aria-hidden="true">image0</figcaption></figure><figure><img src="image11.png" alt="image11" /><figcaption aria-hidden="true">image11</figcaption></figure><p>得到成功会话信息：</p><figure><img src="image20.png" alt="image20" /><figcaption aria-hidden="true">image20</figcaption></figure><figure><img src="image21.png" alt="image21" /><figcaption aria-hidden="true">image21</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">username:hackbackzip<br>domain:DESKTOP-0TNOE4V<br>ServerChalange:c609ad1b3a15aedc<br>NTproofstring:eb1b0afc1eef819c1dccd514c9623201<br>modifiedntlmv2respomse:<span class="hljs-number">0</span>1010000000000006f233d3d9f9edb01755959535466696d0000000002001e004400450053004b0054004f0050002d00300054004e004f0045003400560001001e004400450053004b0054004f0050002d00300054004e004f0045003400560004001e004400450053004b0054004f0050002d00300054004e004f0045003400560003001e004400450053004b0054004f0050002d00300054004e004f00450034005600070008006f233d3d9f9edb010900280063006900660073002f004400450053004b0054004f0050002d00300054004e004f004500340056000000000000000000<br></code></pre></td></tr></table></figure><p>hashcat字典爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">hackbackzip::DESKTOP-0TNOE4V:d102444d56e078f4:eb1b0afc1eef819c1dccd514c9623201:<span class="hljs-number">0</span>1010000000000006f233d3d9f9edb01755959535466696d0000000002001e004400450053004b0054004f0050002d00300054004e004f0045003400560001001e004400450053004b0054004f0050002d00300054004e004f0045003400560004001e004400450053004b0054004f0050002d00300054004e004f0045003400560003001e004400450053004b0054004f0050002d00300054004e004f00450034005600070008006f233d3d9f9edb010900280063006900660073002f004400450053004b0054004f0050002d00300054004e004f004500340056000000000000000000<br></code></pre></td></tr></table></figure><figure><img src="image22.png" alt="image22" /><figcaption aria-hidden="true">image22</figcaption></figure><p>得到密码：pikeplace</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">LZCTF&#123;hackbackzip:pikeplace&#125;<br></code></pre></td></tr></table></figure><h3 id="w3c10m3">W3c10m3</h3><p>ps一下，扫码得到：<code>password：Data_Matrix</code>，解压后用zxing扫码</p><figure><img src="image23.png" alt="image23" /><figcaption aria-hidden="true">image23</figcaption></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">LZCTF</span><span class="hljs-template-variable">&#123;QR_DM_3mb3dd3d_Fl4g_5aMpl3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="nudt520">NUDT520</h3><p>听声音是摩斯密码，放网站</p><figure><img src="image24.png" alt="image24" /><figcaption aria-hidden="true">image24</figcaption></figure><p>lsb音频隐写，使用SilentEye得到压缩包flag.zip(爆破密码，第一次用的是字典，跑了老久han)</p><figure><img src="image25.png" alt="image25" /><figcaption aria-hidden="true">image25</figcaption></figure><p>解压后出现NNUUDDTT.lzb，注意提示:“与后缀无关，与文件名有关”。观察文件内容：</p><figure><img src="image26.png" alt="image26" /><figcaption aria-hidden="true">image26</figcaption></figure><p>此处含有许多NNUUDDTT中的字符，同时出现^异或标志，猜测异或文件名(meng)</p><figure><img src="image27.png" alt="image27" /><figcaption aria-hidden="true">image27</figcaption></figure><figure><img src="image28.png" alt="image28" /><figcaption aria-hidden="true">image28</figcaption></figure><p>结果结尾显示LSB520，文件头位PNG，改后缀并lsb按照rgb分别5、2、0处理数据</p><figure><img src="image29.png" alt="image29" /><figcaption aria-hidden="true">image29</figcaption></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">LZCTF</span><span class="hljs-template-variable">&#123;LSB_Stegan0graphy_Master_1n_PNG_WAV&#125;</span><br></code></pre></td></tr></table></figure><h2 id="forensics">FORENSICS</h2><h3 id="who_is_the_winner-1">who_is_the_winner-1</h3><p>autopsy挂载img，Temp下有hack.txt</p><figure><img src="image30.png" alt="image30" /><figcaption aria-hidden="true">image30</figcaption></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">LZCTF&#123;<span class="hljs-symbol">H@</span>_hA_y0ur_PC_15_h4cK3d!&#125;<br></code></pre></td></tr></table></figure><h3 id="who_is_the_winner-2">who_is_the_winner-2</h3><p>在C:：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\Public\Downloads\svchost.exe<br><span class="hljs-name">C</span>:\Users\admin\AppData\Local\Temp\_MEI39842\mal.py<br></code></pre></td></tr></table></figure><figure><img src="image31.png" alt="image31" /><figcaption aria-hidden="true">image31</figcaption></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">LZCTF&#123;<span class="hljs-name">C</span>:\Users\Public\Downloads\svchost.exe&#125;<br></code></pre></td></tr></table></figure><h3 id="who_is_the_winner-3">who_is_the_winner-3</h3><p>上一问的木马导出，用pyinstxtractor处理，得到mal.pyc，010打开，注意到base64编码的部分字符（前方存在create、base64）</p><figure><img src="image32.png" alt="image32" /><figcaption aria-hidden="true">image32</figcaption></figure><figure><img src="image1.png" alt="image1" /><figcaption aria-hidden="true">image1</figcaption></figure><p>得到密码，用户在autopsy的os account出现过。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">LZCTF&#123;<span class="hljs-symbol">w1nh4ck3r_P@</span>ssw0rd!&#125;<br></code></pre></td></tr></table></figure><h2 id="ai">AI</h2><h3 id="jailbreak-exec">JailBreak-exec</h3><p>把route.ts喂给ai，并提示他注意eval()函数</p><figure><img src="image2.png" alt="image2" /><figcaption aria-hidden="true">image2</figcaption></figure><figure><img src="image3.png" alt="image3" /><figcaption aria-hidden="true">image3</figcaption></figure><figure><img src="image4.png" alt="image4" /><figcaption aria-hidden="true">image4</figcaption></figure><p>按照回答尝试绕过，使用提示词工程中的“不允许”</p><p>发现先用：<code>"); const cmd = 'pro' + 'cess'; const act = 'ex' + 'it'; global[cmd][act](1); //</code></p><p>进行扰乱，再使用<code>"); require('child</code><em><code>_</code></em><code>process').execSync('whoami').toString()</code>即可得到类似shell的情况</p><figure><img src="image5.png" alt="image5" /><figcaption aria-hidden="true">image5</figcaption></figure><figure><img src="image6.png" alt="image6" /><figcaption aria-hidden="true">image6</figcaption></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LZCTF</span>&#123;<span class="hljs-number">5</span>e3f511f-<span class="hljs-number">9</span>dca-<span class="hljs-number">4396</span>-a810-da61cbb1d722&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>misc</tag>
      
      <tag>ai</tag>
      
      <tag>forensics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LitCTF 2025</title>
    <link href="/2025/09/23/LitCTF%202025/"/>
    <url>/2025/09/23/LitCTF%202025/</url>
    
    <content type="html"><![CDATA[<h2 id="basic">basic</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span><br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e,n-<span class="hljs-number">1</span>),n)))<br><span class="hljs-comment"># b&#x27;LitCTF&#123;ee2c30dfe684f13a6e6c07b9ec90cc2c&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="baby">baby</h2><p>简单的NTRU，需要配平</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>g = <span class="hljs-number">7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br>c = <span class="hljs-number">2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br>b = <span class="hljs-number">2</span> ** <span class="hljs-number">128</span><br><br>mat =  [[<span class="hljs-number">1</span>,b*c],[<span class="hljs-number">0</span>,b*g]]<br>M = matrix(ZZ,mat)<br>m = M.LLL()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><span class="hljs-comment"># b&#x27;LitCTF&#123;56008a819331c9f3608a718327b7e6ce&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ez_math">ez_math</h2><p>用e在p上的逆元对矩阵进行运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span><br>B = [[<span class="hljs-number">2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170</span>, <span class="hljs-number">4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547</span>], [<span class="hljs-number">3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598</span>, <span class="hljs-number">2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992</span>]]<br><br>P = GF(p)<br>M = matrix(P, B)<br><br>m = (M ** inverse(e,p-<span class="hljs-number">1</span>))[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><span class="hljs-comment"># b&#x27;LitCTF&#123;13dd217e-9a67-4093-8a1b-d2592c45ba82&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="leak">leak</h2><p>dp高位泄露+二元coppersmith</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><br>e = <span class="hljs-number">1915595112993511209389477484497</span><br>n = <span class="hljs-number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span><br>c = <span class="hljs-number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span><br>hint = <span class="hljs-number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br><br>    R = f.base_ring()<br>    N = R.cardinality()<br><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficients_monomials()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br><br>    <span class="hljs-keyword">return</span> []<br><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n),implementation=<span class="hljs-string">&#x27;generic&#x27;</span>)<br>leak = hint &lt;&lt; <span class="hljs-number">180</span><br><br>f = e*(leak + x) + (y - <span class="hljs-number">1</span>)<br><br>res = small_roots(f,(<span class="hljs-number">2</span>^<span class="hljs-number">180</span>,<span class="hljs-number">2</span>^<span class="hljs-number">101</span>),m=<span class="hljs-number">2</span>,d=<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(res)<br><br>dp = leak + res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>tmp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,e*dp,n)-<span class="hljs-number">2</span><br>p = GCD(tmp,n)<br>q = n//p<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)), n)))<br><span class="hljs-comment"># LitCTF&#123;03ecda15d1a89b06454c6050c1bd489f&#125;</span><br></code></pre></td></tr></table></figure><h2 id="math">math</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br>hint = <span class="hljs-number">17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><br><span class="hljs-comment"># print(hint-n)</span><br><span class="hljs-comment"># hint-n = noise*(p+q+noise) = 19*942430120937*13942360585323048470909846656964572704513299405546046811010328770033198426421576349568926279384369628072261252513038693891801832793244205614823946991510903118232135334563566099595180800155562142673080500174590397281272043792295225345391996291640336108556360227747859478557651612788250116887738800942290148741</span><br><br>noise = <span class="hljs-number">942430120937</span><br>paq = (hint - n) // noise -noise<br>phi = n - paq + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e,phi),n)))<br><span class="hljs-comment"># LitCTF&#123;db6f52b9265971910b306754b9df8b76&#125;</span><br></code></pre></td></tr></table></figure><h2 id="new_bag">new_bag</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params">length</span>):<br>    characters = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;_&#x27;</span><br>    flag = <span class="hljs-string">&#x27;LitCTF&#123;&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>    <span class="hljs-keyword">return</span> flag.encode()<br><br>flag = get_flag(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(flag)<br>flag = <span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:]<br><br>p = getPrime(<span class="hljs-number">128</span>)<br>pubkey = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]<br>enc = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    enc += pubkey[i] * <span class="hljs-built_in">int</span>(flag[i])<br>    enc %= p<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;pubkey = <span class="hljs-subst">&#123;pubkey&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;enc = <span class="hljs-subst">&#123;enc&#125;</span>\n&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>背包密码，部分明文已知，同时p的大小和pub相当，可知k小于<spanclass="math inline"><em>s</em><em>u</em><em>m</em>(<em>f</em><em>l</em><em>a</em><em>g</em><sub><em>i</em></sub>) &lt; 64 (<em>i</em> = 56 − 119)</span>,能够直接爆破。</p><p><span class="math inline">$enc-know =\sum^{119}_{i=56}pub_i*int(flag_i) \mod p$</span></p><p><span class="math inline">$\begin{pmatrix}f_1 &amp; f_2 &amp; ···&amp; f_{64} &amp; 1\end{pmatrix}\begin{pmatrix} 2 &amp; 0 &amp; ···&amp; 0 &amp; pub_1 \\ 0 &amp; 2 &amp; ··· &amp; 0 &amp;pub_2 \\ ···&amp; ··· &amp; ··· &amp; ··· &amp; ··· \\ 0 &amp; 0 &amp; ··· &amp; 2&amp; pub_{64} \\ -1 &amp; -1 &amp; ··· &amp; -1 &amp;-(enc-know+k*p)\end{pmatrix}=$</span></p><p><span class="math inline">$\begin{pmatrix}2*f_1-1 &amp; 2*f_2-1 &amp;··· &amp; 2*f_{64}-1 &amp; 0\end{pmatrix}$</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br>p = <span class="hljs-number">173537234562263850990112795836487093439</span><br>pubkey = [···]<br>enc = <span class="hljs-number">82516114905258351634653446232397085739</span><br><br>flag_know = <span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br>know = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(bytes_to_long(flag_know))[<span class="hljs-number">2</span>:]]<br>new_pub = pubkey[-<span class="hljs-number">72</span>:-<span class="hljs-number">8</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(know)):<br>    enc = (enc - know[i]*pubkey[i]) % p<br><br>n = <span class="hljs-built_in">len</span>(new_pub)<br>M = matrix(ZZ,n+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)<br>b = <span class="hljs-number">2</span>^<span class="hljs-number">256</span> <span class="hljs-comment"># 配平</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    M[i,i]=<span class="hljs-number">2</span><br>    M[-<span class="hljs-number">1</span>,i]=-<span class="hljs-number">1</span><br>    M[i,-<span class="hljs-number">1</span>]=new_pub[i]*b<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> trange(<span class="hljs-number">64</span>):<br>    c = enc + k*p<br>    M[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = -b*c<br><br>    res = M.LLL()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        rows = res.row(i).<span class="hljs-built_in">list</span>()<br>        key=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows[:-<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">if</span> i!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i!=<span class="hljs-number">1</span>:<br>                key=<span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> key:<br>            <span class="hljs-built_in">print</span>(rows)<br>            flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows[:-<span class="hljs-number">1</span>]])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span>+long_to_bytes(<span class="hljs-built_in">int</span>(flag,<span class="hljs-number">2</span>))+<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>            exit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TGCTF 2025</title>
    <link href="/2025/09/23/TGCTF%202025/"/>
    <url>/2025/09/23/TGCTF%202025/</url>
    
    <content type="html"><![CDATA[<h2 id="mm不躲猫猫">mm不躲猫猫</h2><p>RSA的公因数攻击，当两个n有公因数时，p、q均可求得，即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">import</span> os<br><br>script = os.path.dirname(__file__)<br>file_dir=os.path.join(script,<span class="hljs-string">&#x27;challenge.txt&#x27;</span>)<br><br>lines=[]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_dir, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br>n=[]<br>c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(lines)-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>    n.append(<span class="hljs-built_in">int</span>(lines[i+<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;n = &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)))<br>    c.append(<span class="hljs-built_in">int</span>(lines[i+<span class="hljs-number">2</span>].replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;c = &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)))<br><br>e = <span class="hljs-number">65537</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(n)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(n)):<br>        p = gcd(n[i], n[j])<br>        <span class="hljs-keyword">if</span> p &gt; <span class="hljs-number">1</span>:<br>            c = c[i]<br>            q = n[i] // p<br>            d = inverse(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>            flag = long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n[i]))<br>            <span class="hljs-built_in">print</span>(flag)<br>            exit()<br><span class="hljs-comment">#TGCTF&#123;ExcePt10n4lY0u_Fl4gF0rY0u_555b0nus&#125;</span><br></code></pre></td></tr></table></figure><h2 id="费克特尔">费克特尔</h2><p>yafu分解n得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">P3 = <span class="hljs-number">113</span><br>P5 = <span class="hljs-number">18251</span><br>P7 = <span class="hljs-number">2001511</span><br>P39 = <span class="hljs-number">916848439436544911290378588839845528581</span><br>P27 = <span class="hljs-number">214168842768662180574654641</span><br></code></pre></td></tr></table></figure><p>计算phi，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c=<span class="hljs-number">670610235999012099846283721569059674725712804950807955010725968103642359765806</span><br>n=<span class="hljs-number">810544624661213367964996895060815354972889892659483948276203088055391907479553</span><br>e=<span class="hljs-number">65537</span><br><br>P3 = <span class="hljs-number">113</span><br>P5 = <span class="hljs-number">18251</span><br>P7 = <span class="hljs-number">2001511</span><br>P39 = <span class="hljs-number">916848439436544911290378588839845528581</span><br>P27 = <span class="hljs-number">214168842768662180574654641</span><br><br>phi = (P3-<span class="hljs-number">1</span>)*(P5-<span class="hljs-number">1</span>)*(P7-<span class="hljs-number">1</span>)*(P39-<span class="hljs-number">1</span>)*(P27-<span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;TGCTF&#123;f4888_6abdc_9c2bd_9036bb&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="宝宝rsa">宝宝rsa</h2><p>第一部分遍历求e，第二部分低加密指数且c和n相差较大，直接求根即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_primes</span>(<span class="hljs-params">start, end</span>):<br>    current = start<br>    <span class="hljs-keyword">while</span> current &lt;= end:<br>        <span class="hljs-keyword">if</span> gmpy2.is_prime(current):<br>            <span class="hljs-keyword">yield</span> current<br>        current = gmpy2.next_prime(current)<br><br>p1 = <span class="hljs-number">8362851990079664018649774360159786938757293294328116561219351503022492961843907118845919317399785168488103775809531198339213009936918460080250107807031483</span><br>q1 = <span class="hljs-number">8312546034426788223492083178829355192676175323324230533451989649056072814335528263136523605276378801682321623998646291206494179416941978672637426346496531</span><br>c1 = <span class="hljs-number">39711973075443303473292859404026809299317446021917391206568511014894789946819103680496756934914058521250438186214943037578346772475409633145435232816799913236259074769958139045997486622505579239448395807857034154142067866860431132262060279168752474990452298895511880964765819538256786616223902867436130100322</span><br>n2 = <span class="hljs-number">103873139604388138367962901582343595570773101048733694603978570485894317088745160532049473181477976966240986994452119002966492405873949673076731730953232584747066494028393377311943117296014622567610739232596396108513639030323602579269952539931712136467116373246367352649143304819856986264023237676167338361059</span><br>c2 = <span class="hljs-number">51380982170049779703682835988073709896409264083198805522051459033730166821511419536113492522308604225188048202917930917221</span><br>e2 = <span class="hljs-number">3</span><br><br>flag2=long_to_bytes(gmpy2.iroot(c2, <span class="hljs-number">3</span>)[<span class="hljs-number">0</span>])<br><br>phi= (p1 - <span class="hljs-number">1</span>) * (q1 - <span class="hljs-number">1</span>)<br>n1= p1 * q1<br><br><span class="hljs-keyword">for</span> e_candidate <span class="hljs-keyword">in</span> generate_primes(<span class="hljs-number">0x20001</span>, <span class="hljs-number">0x3FFFF</span>):<br>    <span class="hljs-keyword">if</span> gcd(e_candidate, phi) != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">try</span>:<br>        d = gmpy2.invert(e_candidate, phi)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br>    m = <span class="hljs-built_in">pow</span>(c1, d, n1)<br>    m_bytes = long_to_bytes(m)<br>    <span class="hljs-keyword">if</span> m_bytes.startswith(<span class="hljs-string">b&#x27;TGCTF&#123;&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found e = <span class="hljs-subst">&#123;e_candidate&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag: <span class="hljs-subst">&#123;m_bytes.decode()+flag2.decode()&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#Found e = 261713</span><br><span class="hljs-comment">#Flag: TGCTF&#123;!!3xP_Is_Sm@ll_But_D@ng3r0&#125;</span><br></code></pre></td></tr></table></figure><h2 id="aaaaaaaa真签到">AAAAAAAA·真·签到</h2><p>看提示为凯撒加密，观察发现key按照1的差值递减，对字母位反向运算得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">str1=<span class="hljs-string">&#x27;UGBRC&#123;RI0G!O04_5C3_OVUI_DV_MNTB&#125;&#x27;</span><br>str2=<span class="hljs-string">&#x27;TGCTF&#123;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str2)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(str1[i])-<span class="hljs-built_in">ord</span>(str2[i]),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-comment">#1 0 -1 -2 -3 0</span><br>key=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str1)):<br>    <span class="hljs-keyword">if</span> str1[i] <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(str1[i])-key-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(str1[i],end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    key-=<span class="hljs-number">1</span><br>    <span class="hljs-comment">#TGCTF&#123;WO0O!Y04_5R3_GOOD_AT_MOVE&#125;</span><br></code></pre></td></tr></table></figure><h2 id="trwsians">tRwSiAns</h2><p>e很小，则有 <spanclass="math inline">(<em>m</em> + <em>h</em><em>a</em><em>s</em><em>h</em>(<em>x</em><sub>1</sub>))<sup>3</sup> − (<em>m</em> + <em>h</em><em>a</em><em>s</em><em>h</em>(<em>x</em><sub>2</sub>))<sup>3</sup> = <em>c</em><sub>1</sub> − <em>c</em><sub>2</sub> mod  <em>n</em></span>，展开得到一元二次方程，由于m小于n，求得的方程解即为m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">a,b,c</span>):<br>    delta=b**<span class="hljs-number">2</span>-<span class="hljs-number">4</span>*a*c<br><br>    <span class="hljs-keyword">if</span> delta&lt;<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">elif</span> delta==<span class="hljs-number">0</span>:<br>        x=(-b+sqrt(delta))/(<span class="hljs-number">2</span>*a)<br>        <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">else</span>:<br>        x1=(-b+gmpy2.iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])//(<span class="hljs-number">2</span>*a)<br>        x2=(-b-gmpy2.iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])//(<span class="hljs-number">2</span>*a)<br>        <span class="hljs-keyword">return</span> [x1,x2]<br><br>n = <span class="hljs-number">100885785256342169056765112203447042910886647238787490462506364977429519290706204521984596783537199842140535823208433284571495132415960381175163434675775328905396713032321690195499705998621049971024487732085874710868565606249892231863632731481840542506411757024315315311788336796336407286355303887021285839839</span><br>e = <span class="hljs-number">3</span><br>c1 = <span class="hljs-number">41973910895747673899187679417443865074160589754180118442365040608786257167532976519645413349472355652086604920132172274308809002827286937134629295632868623764934042989648498006706284984313078230848738989331579140105876643369041029438708179499450424414752031366276378743595588425043730563346092854896545408366</span><br>c2 = <span class="hljs-number">41973912583926901518444642835111314526720967879172223986535984124576403651553273447618087600591347032422378272332279802860926604693828116337548053006928860031338938935746179912330961194768693506712533420818446672613053888256943921222915644107389736912059397747390472331492265060448066180414639931364582445814</span><br><br><span class="hljs-comment">#x1, x2 = 307, 7</span><br><span class="hljs-comment">#x11=int(hashlib.md5(str(x1).encode()).hexdigest(), 16)</span><br><span class="hljs-comment">#x22=int(hashlib.md5(str(x2).encode()).hexdigest(), 16)</span><br>x11=<span class="hljs-number">189543988020763859054201121867732572001</span><br>x22=<span class="hljs-number">190188081314515644627836686569786975555</span><br><br>a=<span class="hljs-number">3</span>*(x11-x22)<br>b=<span class="hljs-number">3</span>*(x11**<span class="hljs-number">2</span>-x22**<span class="hljs-number">2</span>)<br>c=x11**<span class="hljs-number">3</span>-x22**<span class="hljs-number">3</span>-c1+c2<br><br>x=solve(a,b,c)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(x[<span class="hljs-number">1</span>]))<br><span class="hljs-comment">#b&#x27;TGCTF&#123;RS4_Tw1nZ_d0You_th1nk_ItS_fun_2win?!!!1111111111&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ezrsa">ezrsa</h2><p>参考：<ahref="https://idontknowctf.xyz/2025/04/14/TGCTF25-%E4%B8%8D%E7%9F%A5%E9%81%93-WP/">TGCTF25不知道 WP | 不知道のblog</a></p><p>p低位泄露，使用copper恢复p</p><p>e,phi不互素，有限域开方，中国剩余定理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -----------分析-------------#</span><br><span class="hljs-comment"># print(224//32*32)           # 224</span><br><span class="hljs-comment"># print(512//8//4-224//32)    # 9</span><br><span class="hljs-comment"># p的高位为224位01串，低位位9个emoji</span><br><span class="hljs-comment"># print(512//8//4)            # 16</span><br><span class="hljs-comment"># q位16个emoji</span><br><br><span class="hljs-comment"># for a in &#x27;😘😾😂😋😶😾😳😷&#x27;: # 共有9个emoji，这里给出低8个，只有后两位不同，爆破一下</span><br><span class="hljs-comment">#     print(bytes_to_long(a.encode()),end=&#x27; &#x27;) # 4036991128 4036991166 4036991106 4036991115 4036991158 4036991166 4036991155 4036991159</span><br><span class="hljs-comment"># print(len(bin(4036991128).replace(&#x27;0b&#x27;,&#x27;&#x27;))) # 32位</span><br><br><span class="hljs-comment"># from Crypto.Util.number import *</span><br><span class="hljs-comment"># print(bytes_to_long(&#x27;😘😾😂😋😶😾😳😷&#x27;.encode())) # P0_=108837065531980906150333850570890620719343963272506332719822248235755953428663</span><br><br><span class="hljs-comment"># -----------exp-------------#</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># sage p低位泄露</span><br><span class="hljs-string">from Crypto.Util.number import *</span><br><span class="hljs-string"></span><br><span class="hljs-string">p0_=108837065531980906150333850570890620719343963272506332719822248235755953428663</span><br><span class="hljs-string">n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span><br><span class="hljs-string">p1_ = 4036991100</span><br><span class="hljs-string"></span><br><span class="hljs-string">P.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="hljs-string"></span><br><span class="hljs-string">for k in range(100):</span><br><span class="hljs-string">    print(f&#x27;k=&#123;k&#125;&#x27;)</span><br><span class="hljs-string">    f = x*2^(32*9) + p0_ + (p1_+k)*2^(8*32)</span><br><span class="hljs-string">    f = f.monic()</span><br><span class="hljs-string">    roots=f.small_roots(X=2^225, beta=0.4, epsilon=0.04)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if roots:</span><br><span class="hljs-string">        x = roots[0]</span><br><span class="hljs-string">        p_candidate = int(x*2^(32*9) + p0_ + (p1_+k)*2^(8*32))</span><br><span class="hljs-string">        if n % p_candidate == 0:</span><br><span class="hljs-string">            print(&quot;p = &quot;,p_candidate)</span><br><span class="hljs-string">            print(&quot;q = &quot;,n//p_candidate)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string"># p =  12424840247075830662687097292458444573014198016321428995092662043898159667123240573630892907827505266982898641483333170032514244713840745287869771915696311</span><br><span class="hljs-string"># q =  12602471198163266643743702664647336358595911975665358584258749238146841559843060594842063473155049870396568542257767865369797827796765830093256146584311989</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p =  <span class="hljs-number">12424840247075830662687097292458444573014198016321428995092662043898159667123240573630892907827505266982898641483333170032514244713840745287869771915696311</span><br>q =  <span class="hljs-number">12602471198163266643743702664647336358595911975665358584258749238146841559843060594842063473155049870396568542257767865369797827796765830093256146584311989</span><br>n = <span class="hljs-number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span><br>c = <span class="hljs-number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span><br><span class="hljs-comment"># e = bytes_to_long(&quot;💯&quot;.encode())</span><br>e = <span class="hljs-number">4036989615</span><br><br><span class="hljs-comment"># 有限域开方，e、phi不互素</span><br><span class="hljs-comment"># print(GCD(e,(p-1)*(q-1)))   # 15</span><br><span class="hljs-comment"># print(GCD(e,(p-1)))         # 5</span><br><span class="hljs-comment"># print(GCD(e,(q-1)))         # 3</span><br><span class="hljs-comment"># e,phi不互素，且e和(p-1)、(q-1)均不互素，使用有限域开方</span><br><br>d = inverse(e//GCD(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>c = <span class="hljs-built_in">pow</span>(c,d,n)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># sage</span><br><span class="hljs-string">R.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="hljs-string">f=y^15-c</span><br><span class="hljs-string">f=f.monic()</span><br><span class="hljs-string">m1=f.roots()</span><br><span class="hljs-string"></span><br><span class="hljs-string">R.&lt;z&gt;=PolynomialRing(Zmod(q))</span><br><span class="hljs-string">f=z^15-c</span><br><span class="hljs-string">f=f.monic()</span><br><span class="hljs-string">m2=f.roots()</span><br><span class="hljs-string"></span><br><span class="hljs-string">for i in m1:</span><br><span class="hljs-string">    for j in m2:</span><br><span class="hljs-string">        m=solve_crt([int(i[0]),int(j[0])],[int(p),int(q)])</span><br><span class="hljs-string">        if b&#x27;TGCTF&#x27; in long_to_bytes(int(m)):</span><br><span class="hljs-string">            print(long_to_bytes(int(m)).decode())</span><br><span class="hljs-string"># TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;😃😖😘😨😢</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;</span><br></code></pre></td></tr></table></figure><p>有限域开方原理：参考:<ahref="https://blog.csdn.net/XiongSiqi_blog/article/details/130296035">e与phi不互素— 四 + 1 + 1 + 1道题详记-CSDN博客</a></p><figure><img src="./assets/226e1848-c3de-4b7b-bdba-f5cede44657f.webp"alt="loading-ag-134" /><figcaption aria-hidden="true">loading-ag-134</figcaption></figure><h2 id="lllcg">LLLCG</h2><p>中国剩余定理求得k，根据k利用groebner_basis()求出n，解线性方程组得到破解LCG。DSA直接求出x破解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> re<br><br>rc1 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>rc2 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>rc3 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>m1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;([pqgy])\s*=\s*(\d+)&#x27;</span>).findall(rc1)<br>m2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;ks\s*=\s*(\[.*?\])&#x27;</span>).findall(rc2)<br>m3 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;([rs])\s*=\s*(\d+)&#x27;</span>).findall(rc3)<br><br>p = <span class="hljs-built_in">int</span>(m1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>q = <span class="hljs-built_in">int</span>(m1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>g = <span class="hljs-built_in">int</span>(m1[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br>y = <span class="hljs-built_in">int</span>(m1[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>])<br><br>a_list = [<span class="hljs-built_in">eval</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m2]<br><br>sigs = [[<span class="hljs-built_in">int</span>(m3[i][<span class="hljs-number">1</span>]), <span class="hljs-built_in">int</span>(m3[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(m3),<span class="hljs-number">2</span>)]<br><br>m_list = [<span class="hljs-number">59093</span>, <span class="hljs-number">65371</span>, <span class="hljs-number">37337</span>, <span class="hljs-number">43759</span>, <span class="hljs-number">52859</span>, <span class="hljs-number">39541</span>, <span class="hljs-number">60457</span>, <span class="hljs-number">61469</span>, <span class="hljs-number">43711</span>]<br><br>k = [crt(a_list[i], m_list) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a_list))]<br><br>R.&lt;a, b, c, d&gt; = PolynomialRing(ZZ)<br><br>f1 = a * k[<span class="hljs-number">0</span>] + b * k[<span class="hljs-number">1</span>] + c * k[<span class="hljs-number">2</span>] + d - k[<span class="hljs-number">3</span>]<br>f2 = a * k[<span class="hljs-number">1</span>] + b * k[<span class="hljs-number">2</span>] + c * k[<span class="hljs-number">3</span>] + d - k[<span class="hljs-number">4</span>]<br>f3 = a * k[<span class="hljs-number">2</span>] + b * k[<span class="hljs-number">3</span>] + c * k[<span class="hljs-number">4</span>] + d - k[<span class="hljs-number">5</span>]<br>f4 = a * k[<span class="hljs-number">3</span>] + b * k[<span class="hljs-number">4</span>] + c * k[<span class="hljs-number">5</span>] + d - k[<span class="hljs-number">6</span>]<br>f5 = a * k[<span class="hljs-number">4</span>] + b * k[<span class="hljs-number">5</span>] + c * k[<span class="hljs-number">6</span>] + d - k[<span class="hljs-number">7</span>]<br>f6 = a * k[<span class="hljs-number">5</span>] + b * k[<span class="hljs-number">6</span>] + c * k[<span class="hljs-number">7</span>] + d - k[<span class="hljs-number">8</span>]<br><br>F = [f1, f2, f3, f4, f5, f6]<br>I = Ideal(F).groebner_basis()<br><br>n = <span class="hljs-built_in">int</span>(I[<span class="hljs-number">4</span>])<br><br>A = Matrix(ZZ, [[k[i], k[i + <span class="hljs-number">1</span>], k[i + <span class="hljs-number">2</span>], <span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>B = vector(ZZ, [k[i + <span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br><br>a,b,c,d = A.solve_right(B) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>\nb = <span class="hljs-subst">&#123;b&#125;</span>\nc = <span class="hljs-subst">&#123;c&#125;</span>\nd = <span class="hljs-subst">&#123;d&#125;</span>\nn = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TripleLCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed1, seed2, seed3, a, b, c, d, n</span>):<br>        <span class="hljs-variable language_">self</span>.state = [seed1, seed2, seed3]<br>        <span class="hljs-variable language_">self</span>.a = a<br>        <span class="hljs-variable language_">self</span>.b = b<br>        <span class="hljs-variable language_">self</span>.c = c<br>        <span class="hljs-variable language_">self</span>.d = d<br>        <span class="hljs-variable language_">self</span>.n = n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        new = (<span class="hljs-variable language_">self</span>.a * <span class="hljs-variable language_">self</span>.state[-<span class="hljs-number">3</span>] + <span class="hljs-variable language_">self</span>.b * <span class="hljs-variable language_">self</span>.state[-<span class="hljs-number">2</span>] + <span class="hljs-variable language_">self</span>.c * <span class="hljs-variable language_">self</span>.state[-<span class="hljs-number">1</span>] + <span class="hljs-variable language_">self</span>.d) % <span class="hljs-variable language_">self</span>.n<br>        <span class="hljs-variable language_">self</span>.state.append(new)<br>        <span class="hljs-keyword">return</span> new<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,p,q,g,x,y</span>):<br>        <span class="hljs-variable language_">self</span>.p = p<br>        <span class="hljs-variable language_">self</span>.q = q<br>        <span class="hljs-variable language_">self</span>.g = g<br>        <span class="hljs-variable language_">self</span>.x = x<br>        <span class="hljs-variable language_">self</span>.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">self, msg, k</span>):<br>        h = bytes_to_long(sha256(msg).digest())<br>        r = <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.g, k, <span class="hljs-variable language_">self</span>.p) % <span class="hljs-variable language_">self</span>.q<br>        s = (inverse(k, <span class="hljs-variable language_">self</span>.q) * (h + <span class="hljs-variable language_">self</span>.x * r)) % <span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-keyword">return</span> (r, s)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self, msg, r, s</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt; r &lt; <span class="hljs-variable language_">self</span>.q <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt; s &lt; <span class="hljs-variable language_">self</span>.q):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        h = bytes_to_long(sha256(msg).digest())<br>        w = inverse(s, <span class="hljs-variable language_">self</span>.q)<br>        u1 = (h * w) % <span class="hljs-variable language_">self</span>.q<br>        u2 = (r * w) % <span class="hljs-variable language_">self</span>.q<br>        v = ((<span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.g, u1, <span class="hljs-variable language_">self</span>.p) * <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.y, u2, <span class="hljs-variable language_">self</span>.p)) % <span class="hljs-variable language_">self</span>.p) % <span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-keyword">return</span> v == r<br><br>lcg=TripleLCG(k[-<span class="hljs-number">3</span>],k[-<span class="hljs-number">2</span>],k[-<span class="hljs-number">1</span>],a,b,c,d,n)<br><br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">307</span>):<br>    k = lcg.<span class="hljs-built_in">next</span>()<br><br>x=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    k = <span class="hljs-built_in">int</span>(lcg.<span class="hljs-built_in">next</span>()) % <span class="hljs-built_in">int</span>(q)<br>    h = bytes_to_long(sha256(<span class="hljs-string">b&quot;1&quot;</span>).digest())<br>    x = (sigs[i][<span class="hljs-number">1</span>] * k-h)*inverse(sigs[i][<span class="hljs-number">0</span>],q) % q<br><br>dsa=DSA(p,q,g,x,y)<br>r,s=dsa.sign(<span class="hljs-string">b&quot;2&quot;</span>,k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;msg = 2\nr = <span class="hljs-subst">&#123;r&#125;</span>\ns = <span class="hljs-subst">&#123;s&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HXCTF 2025</title>
    <link href="/2025/09/23/HXCTF%202025/"/>
    <url>/2025/09/23/HXCTF%202025/</url>
    
    <content type="html"><![CDATA[<h2 id="crypto">crypto</h2><h3 id="classic">Classic</h3><p>原字符串<code>bytes.fromhex(str).decode('utf-8')</code>后社会主义核心价值观解码，得到<code>db6b2e47c926f403f02ae9baf031d72aa1a160fc38</code>，根据提示仿射密码进行爆破</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;db6b2e47c926f403f02ae9baf031d72aa1a160fc38&#x27;</span><br><span class="hljs-built_in">str</span>=<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">str</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">256</span>,<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        flag=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>            flag+=<span class="hljs-built_in">chr</span>((c*a+b)%<span class="hljs-number">256</span>)<br>        <span class="hljs-keyword">if</span> flag.startswith(<span class="hljs-string">&#x27;HXCTF&#123;&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># HXCTF&#123;Y0u_found_^^e!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ezdecision">ezDecision</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, getRandomRange, bytes_to_long<br>flag = <span class="hljs-string">b&quot;HXCTF&#123;FAKE_FLAG&#125;&quot;</span><br>p = getPrime(<span class="hljs-number">64</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F0</span>():<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        M = random_matrix(Zmod(p), <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span> M.rank() == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">return</span> M.<span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F1</span>():<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        M = matrix(Zmod(p), [[getRandomRange(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)])<br>        upper = matrix(Zmod(p), [[<span class="hljs-number">1</span>, getRandomRange(<span class="hljs-number">0</span>, p), getRandomRange(<span class="hljs-number">0</span>, p)],<br>                                 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, getRandomRange(<span class="hljs-number">0</span>, p)],<br>                                 [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br>        lower = matrix(Zmod(p), [[<span class="hljs-number">1</span>, getRandomRange(<span class="hljs-number">0</span>, p), getRandomRange(<span class="hljs-number">0</span>, p)],<br>                                 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, getRandomRange(<span class="hljs-number">0</span>, p)],<br>                                 [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]).T<br>        <span class="hljs-keyword">if</span> M.rank() == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (lower*upper*M).<span class="hljs-built_in">list</span>()<br>output = [F1() <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">else</span> F0() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-built_in">len</span>(flag)*<span class="hljs-number">8</span>)]<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-built_in">print</span>(output, file=f)<br><span class="hljs-built_in">print</span>(p, file=f)<br></code></pre></td></tr></table></figure><p>F1生成矩阵的行列式值modp后接近0或者p，F0无此特征，且验证得到F0生成矩阵的<code>det() mod p</code>结果距离p和0都很远</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    M = <span class="hljs-built_in">eval</span>(f.readline())<br>    p = <span class="hljs-built_in">int</span>(f.readline())<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> M:<br>    tmp = <span class="hljs-built_in">int</span>(matrix(ZZ,[m[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>],m[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>],m[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]]).det() % p)<br>    flag &lt;&lt;= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> tmp &lt; <span class="hljs-number">10000</span> <span class="hljs-keyword">or</span> tmp &gt; p - <span class="hljs-number">10000</span>:<br>        flag |= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        flag |= <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br><span class="hljs-comment"># b&#x27;HXCTF&#123;Th3s3_m@trice5_ar3_n0t_di77icu1t_t0_di5tingu1sh&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="babysign">babysign</h3><p>lcg+dsa，参考<ahref="https://blog.csdn.net/ATFWUS/article/details/127362465#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95DSA%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E3%80%81%E7%AD%BE%E5%90%8D%E5%92%8C%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B%EF%BC%8C%E5%B9%B6%E8%AE%A8%E8%AE%BA%E4%BA%86%E4%B8%A4%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%EF%BC%9A%E5%85%B1%E4%BA%ABk%E6%94%BB%E5%87%BB%E5%92%8C%E7%BA%BF%E6%80%A7k%E6%94%BB%E5%87%BB%E3%80%82%20%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E5%B1%95%E7%A4%BA%E4%BA%86%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E8%BF%99%E4%BA%9B%E6%94%BB%E5%87%BB%E6%9D%A5%E7%A0%B4%E8%A7%A3DSA%E7%AD%BE%E5%90%8D%EF%BC%8C%E5%BC%BA%E8%B0%83%E4%BA%86%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E4%BD%BF%E7%94%A8k%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%E3%80%82%20%E6%91%98%E8%A6%81%E7%94%9F%E6%88%90%E4%BA%8E%20C%E7%9F%A5%E9%81%93,%EF%BC%8C%E7%94%B1%20DeepSeek-R1%20%E6%BB%A1%E8%A1%80%E7%89%88%E6%94%AF%E6%8C%81%EF%BC%8C%20%E5%89%8D%E5%BE%80%E4%BD%93%E9%AA%8C%20%3E">DSA数字签名-针对随机数k的共享k攻击&amp;线性k攻击_dsa签名ctf 泄露了随机数k-CSDN博客</a>线性k恢复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>remote=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_x</span>(<span class="hljs-params">q, r, s, h, k</span>):<br>    <span class="hljs-keyword">return</span> (s * k - h) * inverse(r, q) % q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">g,q,p,x,msg,k</span>):<br>    Hm = bytes_to_long(md5(msg).digest())<br>    r = <span class="hljs-built_in">pow</span>(g, k, p) % q<br>    s = (Hm + x * r) * <span class="hljs-built_in">pow</span>(k, -<span class="hljs-number">1</span>, q) % q<br>    <span class="hljs-keyword">return</span> (r, s)<br><br>re1=remote.recvline(<span class="hljs-string">b&#x27;[+]: &#x27;</span>).decode()<br>p,q,g,y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, re1.split(<span class="hljs-string">&#x27;(&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;)&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>))<br>a = <span class="hljs-number">0xe4b39d062f5eaffe04fd8c302b8f956a43264ead</span><br>b = <span class="hljs-number">0xb703a3ec8c6a9520e77d6bb14220abfde7d12dc6</span><br><br>remote.sendlineafter(<span class="hljs-string">b&#x27;[+]: &#x27;</span>,<span class="hljs-string">b&#x27;hijack&#x27;</span>)<br>m1=remote.recvline(<span class="hljs-string">b&#x27;[+]: &#x27;</span>).decode().split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>h1=bytes_to_long(md5(<span class="hljs-built_in">bytes</span>.fromhex(m1[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>))).digest())<br>r1,s1=<span class="hljs-built_in">int</span>(m1[<span class="hljs-number">1</span>]),<span class="hljs-built_in">int</span>(m1[<span class="hljs-number">2</span>])<br><br>remote.sendlineafter(<span class="hljs-string">b&#x27;[+]: &#x27;</span>,<span class="hljs-string">b&#x27;hijack&#x27;</span>)<br>m2=remote.recvline(<span class="hljs-string">b&#x27;[+]: &#x27;</span>).decode().split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>h2=bytes_to_long(md5(<span class="hljs-built_in">bytes</span>.fromhex(m2[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>))).digest())<br>r2,s2=<span class="hljs-built_in">int</span>(m2[<span class="hljs-number">1</span>]),<span class="hljs-built_in">int</span>(m2[<span class="hljs-number">2</span>])<br><br>k = inverse(a * s2 * r1 - s1 * r2, q) * (h2 * r1 - h1 * r2 - b * s2 * r1) % q<br>x = recover_x(q,r1,s1,h1,k)<br><br>msg=<span class="hljs-string">b&#x27;faritree&#x27;</span>+os.urandom(<span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>): k = (a * k + b) % q <br>r, s = sign(g,q,p,x,msg,k)<br><br>remote.sendlineafter(<span class="hljs-string">b&#x27;[+]: &#x27;</span>,<span class="hljs-string">b&#x27;verify&#x27;</span>)<br>remote.sendlineafter(<span class="hljs-string">b&quot;Give me message and signature\n[+]: &quot;</span>,<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg.<span class="hljs-built_in">hex</span>()+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(r)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(s)&#125;</span>&#x27;</span>.encode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;\n&#x27;</span>.join(remote.recvlines(<span class="hljs-number">2</span>)).decode())<br></code></pre></td></tr></table></figure><h3 id="ezopt">ezOPT</h3><p>如同VNCTF2025的并非RC4，这里的交换有误，使得最后一部分的k就是确定的，1-255爆破一下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>enc=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;enc.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    enc = f.readlines()<br>cipher=<span class="hljs-built_in">eval</span>(enc[<span class="hljs-number">0</span>])<br>enc=<span class="hljs-built_in">eval</span>(enc[<span class="hljs-number">1</span>])<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    decipher=[i^<span class="hljs-number">57</span>^k <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher]<br>    s =[decipher[i:i+<span class="hljs-number">16</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(decipher), <span class="hljs-number">16</span>)]<br>    <span class="hljs-built_in">str</span> = [<span class="hljs-built_in">int</span>.from_bytes(i, <span class="hljs-string">&quot;big&quot;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br><br>    S0,S1,S2 = <span class="hljs-built_in">str</span>[-<span class="hljs-number">3</span>],<span class="hljs-built_in">str</span>[-<span class="hljs-number">2</span>],<span class="hljs-built_in">str</span>[-<span class="hljs-number">1</span>]<br>    a = ((S2-S1)*inverse(S1-S0,<span class="hljs-number">2</span>**<span class="hljs-number">128</span>)) % <span class="hljs-number">2</span>**<span class="hljs-number">128</span><br>    b = (S1 - a*S0) % <span class="hljs-number">2</span>**<span class="hljs-number">128</span><br>    key = (S2*a+b) % <span class="hljs-number">2</span>**<span class="hljs-number">128</span><br><br>    flag = AES.new(key.to_bytes(<span class="hljs-number">16</span>, <span class="hljs-string">&quot;big&quot;</span>), mode=AES.MODE_ECB).decrypt(enc)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;HXCTF&quot;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-comment"># flag: b&#x27;HXCTF&#123;a_5maLl_m157aK3_L3Ad5_7O_a_hU93_prOBl3m&#125;\x02\x02&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="weaksystem">WeakSystem</h3><p>根据已知flag的开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">35</span>, <span class="hljs-number">81</span>, <span class="hljs-number">97</span>, <span class="hljs-number">187</span>, <span class="hljs-number">195</span>, <span class="hljs-number">131</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">123</span>, <span class="hljs-number">195</span>, <span class="hljs-number">233</span>, <span class="hljs-number">163</span>, <span class="hljs-number">177</span>, <span class="hljs-number">155</span>, <span class="hljs-number">145</span>, <span class="hljs-number">209</span>, <span class="hljs-number">235</span>, <span class="hljs-number">123</span>, <span class="hljs-number">115</span>, <span class="hljs-number">137</span>, <span class="hljs-number">131</span>, <span class="hljs-number">209</span>, <span class="hljs-number">123</span>, <span class="hljs-number">163</span>, <span class="hljs-number">131</span>, <span class="hljs-number">233</span>, <span class="hljs-number">123</span>, <span class="hljs-number">11</span>, <span class="hljs-number">123</span>, <span class="hljs-number">179</span>, <span class="hljs-number">131</span>, <span class="hljs-number">155</span>, <span class="hljs-number">219</span>]<br>str1=<span class="hljs-string">&#x27;HXCTF&#123;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str1)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(str1[i]))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">list</span>[i])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">01001000</span><br><span class="hljs-string">00001001</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">01011000</span><br><span class="hljs-string">00011001</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">01000011</span><br><span class="hljs-string">00100011</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">01010100</span><br><span class="hljs-string">01010001</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">01000110</span><br><span class="hljs-string">01100001</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">01111011</span><br><span class="hljs-string">10111011</span><br><span class="hljs-string">-----------</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可以推测出现顺序为：25634071</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">35</span>, <span class="hljs-number">81</span>, <span class="hljs-number">97</span>, <span class="hljs-number">187</span>, <span class="hljs-number">195</span>, <span class="hljs-number">131</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">123</span>, <span class="hljs-number">195</span>, <span class="hljs-number">233</span>, <span class="hljs-number">163</span>, <span class="hljs-number">177</span>, <span class="hljs-number">155</span>, <span class="hljs-number">145</span>, <span class="hljs-number">209</span>, <span class="hljs-number">235</span>, <span class="hljs-number">123</span>, <span class="hljs-number">115</span>, <span class="hljs-number">137</span>, <span class="hljs-number">131</span>, <span class="hljs-number">209</span>, <span class="hljs-number">123</span>, <span class="hljs-number">163</span>, <span class="hljs-number">131</span>, <span class="hljs-number">233</span>, <span class="hljs-number">123</span>, <span class="hljs-number">11</span>, <span class="hljs-number">123</span>, <span class="hljs-number">179</span>, <span class="hljs-number">131</span>, <span class="hljs-number">155</span>, <span class="hljs-number">219</span>]<br>str2=<span class="hljs-string">&#x27;25634071&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>    s = <span class="hljs-built_in">bin</span>(s)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    key=&#123;key:value <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(str2,s)&#125;<br>    s = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([i[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(key.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])]),<span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(s,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># HXCTF&#123;easy_encrypto_What_can_I_say&#125;</span><br></code></pre></td></tr></table></figure><p>也可以直接爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-built_in">list</span> = [<span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">35</span>, <span class="hljs-number">81</span>, <span class="hljs-number">97</span>, <span class="hljs-number">187</span>, <span class="hljs-number">195</span>, <span class="hljs-number">131</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">123</span>, <span class="hljs-number">195</span>, <span class="hljs-number">233</span>, <span class="hljs-number">163</span>, <span class="hljs-number">177</span>, <span class="hljs-number">155</span>, <span class="hljs-number">145</span>, <span class="hljs-number">209</span>, <span class="hljs-number">235</span>, <span class="hljs-number">123</span>, <span class="hljs-number">115</span>, <span class="hljs-number">137</span>, <span class="hljs-number">131</span>, <span class="hljs-number">209</span>, <span class="hljs-number">123</span>, <span class="hljs-number">163</span>, <span class="hljs-number">131</span>, <span class="hljs-number">233</span>, <span class="hljs-number">123</span>, <span class="hljs-number">11</span>, <span class="hljs-number">123</span>, <span class="hljs-number">179</span>, <span class="hljs-number">131</span>, <span class="hljs-number">155</span>, <span class="hljs-number">219</span>]<br>str2 = [<span class="hljs-string">&#x27;&#x27;</span>.join([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>]) <span class="hljs-keyword">for</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">in</span> itertools.permutations(<span class="hljs-string">&#x27;01234567&#x27;</span>)]<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">in</span> str2:<br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        s = <span class="hljs-built_in">bin</span>(s)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>        key=&#123;key:value <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">str</span>,s)&#125;<br>        flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([i[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(key.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])]),<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;HXCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># HXCTF&#123;easy_encrypto_What_can_I_say&#125;</span><br></code></pre></td></tr></table></figure><h3 id="weirvierwilson">WeirVierWilson</h3><p>威尔逊定理：当p为素数时，<spanclass="math inline">(<em>p</em> − 1)! = −1 mod  <em>p</em></span></p><p>此处有<code>range(1,prime)</code>等价于此定理内容，故可以简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">PrivateKey = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(prime+<span class="hljs-number">1</span>,prime + prime.bit_length()):<br>    PrivateKey = (PrivateKey * i) % prime<br></code></pre></td></tr></table></figure><p>从而得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>prime = <span class="hljs-number">137507368993355914860594752037581031045352928887415381942526303684476934340258890988567168982905997088929819580321685527266991589958746449618579850907765883870406926066972236505061792661515022699471025570619211456282127086268577930799928025034487476640164726617790269194813768322066680097473281637077598071503</span><br>n = <span class="hljs-number">135682573094891703553176370837232897617602270323588124823165101627726795394883393432665305493991941306105477252624327158129510957489322126803110534374827392252943932529899808378499467893344818778838011561390030105276983196848035629485680341851450845219061424892927388790415769446019942364106200260533601837319</span><br>cipher = <span class="hljs-number">41622954513604406352873105855005440904638036223332018757506281634908104215433400850153277514829103000815542937837390595177169806358970750719651237435525099636604205350232352002592510801557603418471900545470844050105254021489131546373444583233001627136018732688443852250808321663559410660967027997290818817259</span><br><br><br>PrivateKey = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(prime+<span class="hljs-number">1</span>,prime + prime.bit_length()):<br>    PrivateKey = (PrivateKey * i) % prime<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;PrivateKey = &#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(cipher, PrivateKey, n)))<br><span class="hljs-comment"># b&quot;HXCTF&#123;find_+he_f@c+ori@1_i5_very_5imp1e_wi+h_Wi15on&#x27;5_+heorem&#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="base16">base^16</h3><p>观察字符串，符合base91的特征(好吧，用cyberchef试一试就行了，跑几次能看到是91和64的套娃)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> base91<br><br>a=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    b=base91.decode(a).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    k+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;HXCTF&#x27;</span> <span class="hljs-keyword">in</span> b:<br>        <span class="hljs-built_in">print</span>(k,b)<br>        <span class="hljs-keyword">break</span><br><br>    a=base64.b64decode(b).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    k+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;HXCTF&#x27;</span> <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-built_in">print</span>(k,a)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># 32 HXCTF&#123;B6bbAa@ass5ssEee36b6644A4&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ezrsa">ezRSA</h3><p>根据已知信息爆破<spanclass="math inline"><em>p</em><sub><em>l</em><em>o</em><em>w</em></sub> * <em>q</em><sub><em>l</em><em>o</em><em>w</em></sub> =  = <em>n</em><sub><em>l</em><em>o</em><em>w</em></sub></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">n, x</span>):<br>    a = [<span class="hljs-number">0</span>]<br>    b = [<span class="hljs-number">0</span>]<br>    maskx = <span class="hljs-number">1</span><br>    maskn = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        xbit = (x &amp; maskx) &gt;&gt; i<br>        nbit = n % maskn<br>        t_a = []<br>        t_b = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            <span class="hljs-keyword">for</span> aa <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">for</span> bb <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                    <span class="hljs-keyword">if</span> aa ^ bb == xbit:<br>                        tmp2 = n % maskn<br>                        tmp1 = (aa * maskn // <span class="hljs-number">2</span> + a[j]) * (bb * maskn // <span class="hljs-number">2</span> + b[j]) % maskn<br>                        <span class="hljs-keyword">if</span> tmp1 == tmp2:<br>                            t_a.append(aa * maskn // <span class="hljs-number">2</span> + a[j])<br>                            t_b.append(bb * maskn // <span class="hljs-number">2</span> + b[j])<br>        maskx *= <span class="hljs-number">2</span><br>        maskn *= <span class="hljs-number">2</span><br>        a = t_a<br>        b = t_b<br><br>    <span class="hljs-keyword">for</span> a1, b1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>        <span class="hljs-keyword">if</span> a1 * b1 == n:<br>            <span class="hljs-keyword">return</span> a1, b1<br><br>c = <span class="hljs-number">20581338524773710931014796705060927721164022110933170236907622868446276673276379960074983874694013071501404205921712458516719528791313217075372120292540769607768267213148470047192533783356651951103773544607365700830304720348095357381720861732062131428306950367835186817770742714377511664088124921726109762611</span><br>n = <span class="hljs-number">131955690538161673663979223798074678499726259420694182793841613919440640794173261722991102718429029438380697505701015619452283142119487944084622078736557807531823541140258838261464844922518316272881433984179091296264635187662962573084675257499354062781067172877584482339564742280505536614114067794677477277487</span><br>leak = <span class="hljs-number">2854831492248561377973114517344274987491834433439026310389937614171692082857812555747188089670141576752295596881129854180086210600895683598247563627762686</span><br><br><span class="hljs-comment"># print(get_pq(n, leak))</span><br><br>p,q=(<span class="hljs-number">11113942991349591718931137318539743396260239379884216203562999422787515075947711818547244264004890191734871882152561659063904969401500203920653354643291209</span>, <span class="hljs-number">11872986089713421317299505507375936916846603084691936060341849012517323444798572051884859182964850122065017068677498777850682439822551058508514322157039543</span>)<br><span class="hljs-keyword">assert</span> p*q==n<br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(<span class="hljs-number">65537</span>,phi),n)))<br><span class="hljs-comment">#b&#x27;HXCTF&#123;7his_i5_the_r3al_s1gn-in_que5ti0n&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="lfsr">lfsr</h3><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> *<br><br>enc = <span class="hljs-string">b&#x27;\x81H\xd7_\x1c[\x00\xffkX+\x8d\n(-(U\xcd\x13$u\xa1\xceY.\x97\xfd8\x90\x07\xf5\x92&#x27;</span><br>output = <span class="hljs-number">46569537592563541192266548905767353620</span><br>mask = <span class="hljs-number">288869314699467157022235107404330039071</span><br><br><span class="hljs-comment"># print(mask.bit_count())</span><br><span class="hljs-comment"># 64</span><br><span class="hljs-comment"># print(bin(mask)[2:])</span><br><span class="hljs-comment"># 11011001010100100011010011010001010110011010111010010000100000010001001010101001010100101100100011011100110111111111011100011111</span><br><span class="hljs-comment"># print(bin(output)[2:])</span><br><span class="hljs-comment"># 100011000010001111011101111001010010111011111111110101101100011111101000000110011101001010001000100001101010000011110100010100</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">output_ = bin(output)[2:].zfill(128)</span><br><span class="hljs-string">for _ in range(128):</span><br><span class="hljs-string">    if (int(output_[:-1],2) &amp; mask).bit_count() &amp; 1 == int(output_[-1]):</span><br><span class="hljs-string">        output_=str(0)+output_[:-1]</span><br><span class="hljs-string">    else:</span><br><span class="hljs-string">        output_=str(1)+output_[:-1]</span><br><span class="hljs-string">    print(output_)</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(f&#x27;seed=&#123;int(output_,2)&#125;&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>seed = <span class="hljs-number">267642768443430299973922842014429964883</span><br>cipher = AES.new(long_to_bytes(seed), AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(cipher.decrypt(enc))<br><span class="hljs-comment"># b&#x27;HXCTF&#123;s1mpl3_1ine@r_5y5tem&#125;\x05\x05\x05\x05\x05&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="送你弗莱格">送你弗莱格</h3><p>莫斯编码，滴是’.’，嘀是’_‘分隔符，嗒是’-’，转换后找个网站ok</p><h2 id="misc">misc</h2><h3 id="ez隐写">ez隐写</h3><p>图片丢<code>随波逐流</code>，自动分离出一个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">00405030156577d12e3e267704717bb8030e3be447356b1c6d2d2e2723b17b7ad81f40bcb9c6796931512958813fee749a8aaedcea220f847ab6d4343f268d2c1c80b3e785629d0f407f10506d37e79eb77232518f1025317fedbbd7a94668162c4e197e3d39bc8e2c887059592da158a80f4d14c8e5c3a530f4d59e257ce802980a0d5887a2f824e44057f233450278b16c10bdcbaf3c08ea372030a0478747e27616c66680003008d52192d00240394010a8b0302042bb9b2b400008080810106000705010b0be281e3f001070a112271625<br></code></pre></td></tr></table></figure><p>提示信息：<strong>凡事都有两面性，我们不妨倒过来思考一下</strong></p><p>用cyberchef处理，下载逆序后的文件：</p><figure><img src="20f9d475-6269-4cfc-b451-93d738c1e436.png"alt="20f9d475-6269-4cfc-b451-93d738c1e436" /><figcaptionaria-hidden="true">20f9d475-6269-4cfc-b451-93d738c1e436</figcaption></figure><p>压缩包内容<code>0宽隐写</code></p><figure><img src="bed2fc85-2d13-41fa-9c33-426087319732.png"alt="bed2fc85-2d13-41fa-9c33-426087319732" /><figcaptionaria-hidden="true">bed2fc85-2d13-41fa-9c33-426087319732</figcaption></figure><h3 id="f4k3ctr0n1c的新年祝福">f4k3ctr0n1c的新年祝福</h3><p>扒拉出题人的QQ空间</p><h3 id="f4k3ctr0n1c的旅行1">f4k3ctr0n1c的旅行1</h3><p>百度图搜，直接就是古北水镇</p><figure><img src="ffdc3e34-e668-499e-a13a-d3e2ddb7c803.png"alt="ffdc3e34-e668-499e-a13a-d3e2ddb7c803" /><figcaptionaria-hidden="true">ffdc3e34-e668-499e-a13a-d3e2ddb7c803</figcaption></figure><figure><img src="3bbec0c9-89bd-43d4-93f9-8a63916ea4cf.png"alt="3bbec0c9-89bd-43d4-93f9-8a63916ea4cf" /><figcaptionaria-hidden="true">3bbec0c9-89bd-43d4-93f9-8a63916ea4cf</figcaption></figure><h3 id="学姐的微信在哪里呀">学姐的微信在哪里呀</h3><p>01串转二维码，写个脚本，再手机扫一扫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>content = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    content = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines()]<br><br>height = <span class="hljs-built_in">len</span>(content)<br>width = <span class="hljs-built_in">len</span>(content[<span class="hljs-number">0</span>])<br>image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">if</span> content[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            image.putpixel((j, i), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-keyword">else</span>:<br>            image.putpixel((j, i), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><br>image.show()<br></code></pre></td></tr></table></figure><h3 id="测测你的马1">测测你的马1</h3><figure><img src="38180c65-1b9d-4ce7-acd7-88d553202bbb.png"alt="38180c65-1b9d-4ce7-acd7-88d553202bbb" /><figcaptionaria-hidden="true">38180c65-1b9d-4ce7-acd7-88d553202bbb</figcaption></figure><p><code>flag{61.139.2.129_61.139.2.1}</code></p><h3 id="测测你的马2">测测你的马2</h3><p>特定ip流量分析</p><figure><img src="caf4fe0e-92e8-4dbc-9848-dea2286205d2.png"alt="caf4fe0e-92e8-4dbc-9848-dea2286205d2" /><figcaptionaria-hidden="true">caf4fe0e-92e8-4dbc-9848-dea2286205d2</figcaption></figure><p><code>flag{H@_hA_y0ur_PC_15_h4cK3d!}</code></p><h3 id="测测你的马3">测测你的马3</h3><p>第二问中已经有了(用autopsy打开更明显)</p><figure><img src="c99aaf0a-fdec-4918-b854-573f8fbad66e.png"alt="c99aaf0a-fdec-4918-b854-573f8fbad66e" /><figcaptionaria-hidden="true">c99aaf0a-fdec-4918-b854-573f8fbad66e</figcaption></figure><p><code>flag{C:\Temp\hack.txt}</code></p><h3 id="测测你的马4">测测你的马4</h3><figure><img src="41297639-2f9f-4ff8-bcb3-5416c713f53b.png"alt="41297639-2f9f-4ff8-bcb3-5416c713f53b" /><figcaptionaria-hidden="true">41297639-2f9f-4ff8-bcb3-5416c713f53b</figcaption></figure><p><code>flag{w1nh4ck3r}</code></p><h3 id="测测你的马5">测测你的马5</h3><p>网上查找信息的时候发现<code>svchost.exe</code>就是一种恶意文件</p><figure><img src="72674da8-62fe-431d-895c-f45ac899d299.png"alt="72674da8-62fe-431d-895c-f45ac899d299" /><figcaptionaria-hidden="true">72674da8-62fe-431d-895c-f45ac899d299</figcaption></figure><p>找到文件得到位置：</p><figure><img src="394e809c-825d-44d9-aa5d-414629b2d8a4.png"alt="394e809c-825d-44d9-aa5d-414629b2d8a4" /><figcaptionaria-hidden="true">394e809c-825d-44d9-aa5d-414629b2d8a4</figcaption></figure><p><code>flag{C:\Users\Public\Downloads\svchost.exe}</code></p><h3 id="测测你的马6">测测你的马6</h3><p>windows的用户密码，导出system和sam</p><figure><img src="63a7fa46-91cd-4114-8a6a-bf6716a9253b.png"alt="63a7fa46-91cd-4114-8a6a-bf6716a9253b" /><figcaptionaria-hidden="true">63a7fa46-91cd-4114-8a6a-bf6716a9253b</figcaption></figure><figure><img src="e081ace6-8bcf-4cdc-95d7-0202f6bb8236.png"alt="e081ace6-8bcf-4cdc-95d7-0202f6bb8236" /><figcaptionaria-hidden="true">e081ace6-8bcf-4cdc-95d7-0202f6bb8236</figcaption></figure><p>使用mimikatz得到加密结果： <imgsrc="2f017533-553a-4899-82af-54ac8a0b0dcf.png"alt="2f017533-553a-4899-82af-54ac8a0b0dcf" /></p><figure><img src="9d09796b-a644-425f-926f-68fe08336fd3.png"alt="9d09796b-a644-425f-926f-68fe08336fd3" /><figcaptionaria-hidden="true">9d09796b-a644-425f-926f-68fe08336fd3</figcaption></figure><p><code>flag{P@ssw0rd!}</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H[and]NCTF 2025</title>
    <link href="/2025/09/23/H%5Band%5DNCTF%202025/"/>
    <url>/2025/09/23/H%5Band%5DNCTF%202025/</url>
    
    <content type="html"><![CDATA[<h2 id="哈吉coke">哈吉coke</h2><p>原先的两个生成式子转化一下,解一个二元一次方程组,得到逆向式，代入跑一下即可(那个库没装好，用image凑合下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arnold_decode</span>(<span class="hljs-params">image, shuffle_times, a, b</span>):<br>    h, w = image.shape[<span class="hljs-number">0</span>], image.shape[<span class="hljs-number">1</span>]<br>    N = h<br>    arnold_decode_image = np.zeros(shape=image.shape)<br><br>    <span class="hljs-keyword">for</span> time <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(shuffle_times):<br>        <span class="hljs-keyword">for</span> ori_x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>            <span class="hljs-keyword">for</span> ori_y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>                y = (ori_y - a*ori_x) % N<br>                x = (ori_x - b*y) % N<br><br>                arnold_decode_image[x, y, :] = image[ori_x, ori_y, :]<br><br>        image = np.copy(arnold_decode_image)<br><br>    decoded_image_pil = Image.fromarray(np.uint8(arnold_decode_image))<br>    decoded_image_pil.save(<span class="hljs-string">&#x27;decoded_coke.png&#x27;</span>, compress_level=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> arnold_decode_image<br><br><span class="hljs-comment"># 读取编码后的图像并进行解码</span><br>encoded_img_pil = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;en_flag.png&#x27;</span>)<br>encoded_img = np.array(encoded_img_pil)<br>decoded_img = arnold_decode(encoded_img, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="lcgp">lcgp</h2><p>用groebner_basis()求出m，解线性方程组得到a和b，恢复seed，后边是一个p-1光滑的离散对数问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>cc=[]<br>n=<span class="hljs-number">604805773885048132038788501528078428693141138274580426531445179173412328238102786863592612653315029009606622583856638282837864213048342883583286440071990592001905867027978355755042060684149344414810835371740304319571184567860694439564098306766474576403800046937218588251809179787769286393579687694925268985445059</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">R.&lt;a, b&gt; = PolynomialRing(ZZ)</span><br><span class="hljs-string"></span><br><span class="hljs-string">f1 = cc[0]*a+b - cc[1]</span><br><span class="hljs-string">f2 = cc[1]*a+b - cc[2]</span><br><span class="hljs-string">f3 = cc[2]*a+b - cc[3]</span><br><span class="hljs-string">f4 = cc[3]*a+b - cc[4]</span><br><span class="hljs-string"></span><br><span class="hljs-string">F = [f1, f2, f3, f4]</span><br><span class="hljs-string">I = Ideal(F).groebner_basis()</span><br><span class="hljs-string"></span><br><span class="hljs-string">m = I[-1]</span><br><span class="hljs-string">print(m)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>m = <span class="hljs-number">17685238729089629081000199791073775580173848219782600577303616658328942786376878589055722139055973814631247947507009292556525580971952751595622172013382374577299734041726162411213993858497140178230251563824957482883763872967881950049985507310408962206729214890421322185752340466578359217999838551622613116097987673746844913920603425686103175874552686869764028906518131374266999714020645422015426801070343771422250037085635856203202935123956520415086942807824199018302630540169113637093488756273183240186533936637562954227188102214396705205042491881526862572569275650908415160529650027016717502470758797514488134766043</span><br><br><span class="hljs-comment"># A = Matrix(ZZ, [[cc[i], 1] for i in range(2)])</span><br><span class="hljs-comment"># B = vector(ZZ, [cc[i + 1] for i in range(2)])</span><br><br><span class="hljs-comment"># a,b = A.solve_right(B) % n</span><br><span class="hljs-comment"># print(f&#x27;a = &#123;a&#125;\nb = &#123;b&#125;&#x27;)</span><br><br>a = <span class="hljs-number">114639391295096853251612556825424912332678858383511980037292109727674744136577</span><br>b = <span class="hljs-number">93832859253688755553822283464268412913296578295483854293903270701758530321487</span><br><br><span class="hljs-comment"># cc[0] = (a * seed + b) % m</span><br><span class="hljs-comment"># seed = (cc[0]-b)*inverse(a, m) % m</span><br><span class="hljs-comment"># print(seed)</span><br><br>c = <span class="hljs-number">98136663393066487319477131255488756533037186459124433869847045986870213783395243380337142782779765255670853582334927187474123853371504168896312528278296763527266828907487342102002206806408616944398694810398049626860321901229014612541564249969665358849039818103044159048535403863928440335143886672949700153798350</span><br><br>p=n<br>G=GF(p)<br>m = discrete_log(G(c),G(<span class="hljs-number">2024</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># b&#x27;H&amp;NCTF&#123;7ecf4c8c-e6a5-45c7-b7de-2fecc31d8511&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="为什么出题人的rsa总是ez">为什么出题人的rsa总是ez</h2><p>part1去年强网杯的apdq第三部分，part2可参考去年强网杯的Easyrsa，p-1和q-1有公共大因子</p><p>part1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c=<br>n=<br>e = <span class="hljs-number">0x10001</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h1=6992022576367328281523272055384380182550712894467837916200781058620282657859189270338635886912232754034211897894637971546032107000253692739473463119025570291091085702056938901846349325941043398928197991115231668917435951127329817379935880511925882734157491821315858319170121031835598580384038723788681860763814776365440362143661999054338470989558459179388468943933975861549233231199667742564080001256192881732567616103760815633265325456143601649393547666835326272408622540044065067528568675569233240785553062685974593620235466519632833169291153478793523397788719000334929715524989845012633742964209311952378479134661</span><br><span class="hljs-string">h2=16731800146050995761642066586565348732313856101572403535951688869814016691871958158137790504490910445304384109605408840493227057830017039824412834989258703833576252634055087138315434304691218949240382395879124201923060510497916818961571111218224960267593032380037212325935576750663442553781924370849537501656957488833521657563900462052017695599020610911371304659875887924695896434699048696392210066253577839887826292569913713802634067508141124685789817330268562127695548527522031774601654778934513355315628270319037043809972087930951609429846675450469414212384044849089372435124609387061864545559812994515828333828939</span><br><span class="hljs-string">x = h2</span><br><span class="hljs-string">y = h1</span><br><span class="hljs-string">R = Integers(n)</span><br><span class="hljs-string">P.&lt;a, b, p, q&gt; = PolynomialRing(Integers(n))</span><br><span class="hljs-string">f1 = a*p + q</span><br><span class="hljs-string">f2 = p + b*q</span><br><span class="hljs-string">f3 = p*q</span><br><span class="hljs-string">I = Ideal([f1 - x, f2 - y, f3 - n])</span><br><span class="hljs-string">B = I.groebner_basis()</span><br><span class="hljs-string"></span><br><span class="hljs-string">g = B[-1]</span><br><span class="hljs-string"></span><br><span class="hljs-string">z = ZZ(g.coefficient(&#123;q: 1&#125;))</span><br><span class="hljs-string">assert g.constant_coefficient() == R(-y)</span><br><span class="hljs-string"></span><br><span class="hljs-string">_, (z1, _), (z2, _) = list(g)</span><br><span class="hljs-string">z1 = ZZ(z1)</span><br><span class="hljs-string">z2 = ZZ(z2)</span><br><span class="hljs-string"></span><br><span class="hljs-string">S = 2^1024</span><br><span class="hljs-string"></span><br><span class="hljs-string">def run():</span><br><span class="hljs-string">    for p_upper_bits in range(16):</span><br><span class="hljs-string">        p_upper = p_upper_bits &lt;&lt; 1020</span><br><span class="hljs-string">        for q_upper_bits in range(16):</span><br><span class="hljs-string">            q_upper = q_upper_bits &lt;&lt; 1020</span><br><span class="hljs-string">            M = matrix(ZZ, [[S, -1, 0, 0], [S*z1, 0, -1, 0], [S*(z2 + p_upper + q_upper*z1), 0, 0, S], [S*n, 0, 0, 0]])</span><br><span class="hljs-string">            B = M.LLL()</span><br><span class="hljs-string">            for b in B:</span><br><span class="hljs-string">                if b[-1] == S:</span><br><span class="hljs-string">                    if b[1] &lt; 0:</span><br><span class="hljs-string">                        b *= -1</span><br><span class="hljs-string">                    p_guess = b[1] + p_upper</span><br><span class="hljs-string">                    q_guess = b[2] + q_upper</span><br><span class="hljs-string">                    if p_guess * q_guess == n:</span><br><span class="hljs-string">                        print(&quot;p=&quot;,p_guess)</span><br><span class="hljs-string">                        print(&quot;q=&quot;,q_guess)</span><br><span class="hljs-string">                        return</span><br><span class="hljs-string">run()</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>p= <span class="hljs-number">177188903285208307296042325337718015070655966550016849028622684895094994530212031016077478657820294659863380087882438642551865895876610089785688582159581077163878172279272664130902330048802699551787625218282191061369731999218514018283838127417774124079449425744547307723663295068039399770055798019129196328737</span><br>q= <span class="hljs-number">77421764304371516785830207119218195629740062757289214574806372572009324268810656196398704095896732565388883789325878708426448197358847849305068830018367523348775355938562535952043518151103113628048467358783207610070925380543689515588622304430181304811333093745360491647924456778377701448561214951376869138477</span><br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)), n)))<br><span class="hljs-comment"># b&#x27;flag&#123;e_is_xevaf-cityf-fisof-ketaf-metaf-disef-nuvaf-cysuf-dosuf-getuf-cysuf-dasix,bubbleBabble&#125;\xea\xc7P|OQ\x0f\xbc\xdcL;@-\x04\x9de\xd4\x14\xa7vNN\xa1\xce$T\xfd\x12\xc4\x9b\xfe\xeew&#x27;</span><br><span class="hljs-comment"># e = 81733668723981020451323</span><br></code></pre></td></tr></table></figure><p>part2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><br>P.&lt;a,b,g,h,N&gt; = PolynomialRing(ZZ)<br>h = <span class="hljs-number">2</span>*g*a*b+a+b<br>N = <span class="hljs-number">2</span>*h*g+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(N.factor())<br><span class="hljs-comment"># (2*b*g + 1) * (2*a*g + 1)</span><br><br>n=<span class="hljs-number">10244621233521168199001177069337072125430662416754674144307553476569744623474797179990380824494968546110022341144527766891662229403969035901337876527595841503498459533492730326942662450786522178313517616168650624224723066308178042783540825899502172432884573844850572330970359712379107318586435848029783774998269247992706770665069866338710349292941829996807892349030660021792813986069535854445874069535737849684959397062724387110903918355074327499675776518032266136930264621047345474782910332154803497103199598761422179303240476950271702406633802957400888398042773978322395227920699611001956973796492459398737390290487</span><br>g=<span class="hljs-number">2296316201623391483093360819129167852633963112610999269673854449302228853625418585609211427788830598219647604923279054340009043347798635222302374950707</span><br>c=<span class="hljs-number">7522161394702437062976246147354737122573350166270857493289161875402286558096915490526439656281083416286224205494418845652940140144292045338308479237214749282932144020368779474518032067934302376430305635297260147830918089492765917640581392606559936829974748692299762475615766076425088306609448483657623795178727831373194757182797030376302086360751637238867384469269953187938304369668436238848537646544257504724753333177938997524154486602644412199535102323238852958634746165559537630341890450666170836721803871120344373143081664567068672230842855208267929484000179260292518351155693154372172449820053764896414799137097</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b=2*g</span><br><span class="hljs-string">D=int(iroot(n,4)[0]/b)*3</span><br><span class="hljs-string">u,v=divmod((n-1)//b,b)</span><br><span class="hljs-string">a=pow(3,b,n)</span><br><span class="hljs-string">l=[pow(a,r*D,n) for r in range(D+1)]</span><br><span class="hljs-string"></span><br><span class="hljs-string">for s in range(D+1):</span><br><span class="hljs-string">    if pow(a,u-s,n) in l:</span><br><span class="hljs-string">        r=l.index(pow(a,u-s,n))</span><br><span class="hljs-string">        c=r*D+s</span><br><span class="hljs-string">        x,y=sympy.symbols(&#x27;x,y&#x27;)</span><br><span class="hljs-string">        r=sympy.solve([x+y-c*b-v,x*y-u+c])[0]</span><br><span class="hljs-string">        x,y=r[x],r[y]</span><br><span class="hljs-string">        p,q=int(x*b+1),int(y*b+1)</span><br><span class="hljs-string">        break</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(f&#x27;p=&#123;p&#125;&#x27;)</span><br><span class="hljs-string">print(f&#x27;q=&#123;q&#125;&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p=<span class="hljs-number">89689471847596377741222144429998037990667180177357564376140367776414308387012923411995322262858328353318533567758158657166891766790825298883408932478365300323143798943782413227199460096726803837011408747331311614322911225425264615177532865042145570988661750629687056545931523546752474174278821175282246381821</span><br>q=<span class="hljs-number">114223230692329221233593176873809300402703143063931397822580003361438712054166147412606967205124955861521969519047697209787311806459638088623102779532442176190528211946769436968799761724667716082655997119572158947882963880778970164432326393480858337150525471346874196183962785321409039116916910681846888186947</span><br><span class="hljs-comment"># bubblebabble编码: xevaf-cityf-fisof-ketaf-metaf-disef-nuvaf-cysuf-dosuf-getuf-cysuf-dasix</span><br>e = <span class="hljs-number">81733668723981020451323</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),p*q)))<br><span class="hljs-comment"># b&#x27;flag&#123;I wish you success in your cryptography career&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="数据处理">数据处理</h2><p>离散对数+爆破</p><p>part1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># part1:</span><br>n = <span class="hljs-number">2</span> ^ <span class="hljs-number">512</span><br>m = <span class="hljs-number">5084057673176634704877325918195984684237263100965172410645544705367004138917087081637515846739933954602106965103289595670550636402101057955537123475521383</span><br>c = <span class="hljs-number">2989443482952171039348896269189568991072039347099986172010150242445491605115276953489889364577445582220903996856271544149424805812495293211539024953331399</span><br><br>f= discrete_log((mod(c,n)), (mod(m,n)))<br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(m,f,n) == c<br><span class="hljs-comment"># 3282248010524512146638712359816289396373430161050484501341123570760619381019795910712610762203934445754701</span><br></code></pre></td></tr></table></figure><p>part2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br><span class="hljs-comment"># part2:</span><br>flag = <span class="hljs-string">&#x27;3282248010524512146638712359816289396373430161050484501341123570760619381019795910712610762203934445754701&#x27;</span><br><span class="hljs-built_in">dict</span> = [<span class="hljs-string">&#x27;&#x27;</span>.join(p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> permutations(<span class="hljs-string">&#x27;0123689&#x27;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">7</span>))]<br>dict_new = [<span class="hljs-string">&#x27;7&#x27;</span>+k[:<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;4&#x27;</span>+k[<span class="hljs-number">3</span>:]+<span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>]<br>lowercase = <span class="hljs-string">&#x27;0123456789&#x27;</span> <br>uppercase = [k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dict_new]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-built_in">len</span>(uppercase)):<br>    k = uppercase[i].strip()<br>    table = <span class="hljs-string">&#x27;&#x27;</span>.maketrans(k,lowercase)<br>    f = flag.translate(table)<br>    m = long_to_bytes(<span class="hljs-built_in">int</span>(f)) <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;H&amp;NCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> m:<br>        <span class="hljs-built_in">print</span>(m)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># b&#x27;H&amp;NCTF&#123;cut_cut_rrioajtfijrwegeriogjiireigji&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ez-factor">ez-factor</h2><p>A*p+r在coppersmith中modn的情况下会只剩一个r，得到r后GCD得到p，从而得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>N= <span class="hljs-number">155296910351777777627285876776027672037304214686081903889658107735147953235249881743173605221986234177656859035013052546413190754332500394269777193023877978003355429490308124928931570682439681040003000706677272854316717486111569389104048561440718904998206734429111757045421158512642953817797000794436498517023</span><br>hint= <span class="hljs-number">128897771799394706729823046048701824275008016021807110909858536932196768365642942957519868584739269771824527061163774807292614556912712491005558619713483097387272219068456556103195796986984219731534200739471016634325466080225824620962675943991114643524066815621081841013085256358885072412548162291376467189508</span><br>c=<span class="hljs-number">32491252910483344435013657252642812908631157928805388324401451221153787566144288668394161348411375877874802225033713208225889209706188963141818204000519335320453645771183991984871397145401449116355563131852618397832704991151874545202796217273448326885185155844071725702118012339804747838515195046843936285308</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">P.&lt;r&gt; = PolynomialRing(Zmod(N))</span><br><span class="hljs-string">f = r - hint</span><br><span class="hljs-string">res = f.small_roots(X=2^249, beta=0.49, epsilon=0.013)</span><br><span class="hljs-string">print(f&#x27;r = &#123;res[0]&#125;&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>r = <span class="hljs-number">310384729555967603261671853388867753979360895944109353196595111340924855459</span><br>p = GCD(N,hint-r)<br>q = N//p<br><span class="hljs-keyword">assert</span> N == p*q<br>e=<span class="hljs-number">0x10001</span><br>d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,N)))<br><span class="hljs-comment"># b&#x27;H&amp;NCTF&#123;ac354aae-cb6b-4bd1-a9cd-090812b8f93e&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ez-factor-pro">ez-factor-pro</h2><p>比上一个的r多了4位，以至于直接copper出不来，那就爆破四位吧，也不多，到15的时候可以跑出来，part2要先bytes.fromhex()把c转化为bytes再操作</p><p>part1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br>N = <span class="hljs-number">133196604547992363575584257705624404667968600447626367604523982016247386106677898877957513177151872429736948168642977575860754686097638795690422242542292618145151312000412007125887631130667228632902437183933840195380816196093162319293698836053406176957297330716990340998802156803899579713165154526610395279999</span><br>hint = <span class="hljs-number">88154421894117450591552142051149160480833170266148800195422578353703847455418496231944089437130332162458102290491849331143073163240148813116171275432632366729218612063176137204570648617681911344674042091585091104687596255488609263266272373788618920171331355912434290259151350333219719321509782517693267379786</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">P.&lt;r&gt; = PolynomialRing(Zmod(N))</span><br><span class="hljs-string">for rh in trange(8,16):</span><br><span class="hljs-string">    print(f&#x27;Checking rh = &#123;rh&#125;&#x27;)</span><br><span class="hljs-string">    f = rh*2^248 + r - hint</span><br><span class="hljs-string">    res = f.small_roots(X=2^248, beta=0.49, epsilon=0.013)</span><br><span class="hljs-string">    if res:</span><br><span class="hljs-string">        print(f&#x27;rr = &#123;rh*2^248 + res[0]&#125;&#x27;)</span><br><span class="hljs-string">        break</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>rr = <span class="hljs-number">7166351305785506670352015492214713707534657162937963088592442157834795391917</span><br>p = GCD(hint -rr, N)<br>q = N//p<br><span class="hljs-keyword">assert</span> p*q == N<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;rr&#125;</span>\np = <span class="hljs-subst">&#123;p&#125;</span>\nq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># r = 7166351305785506670352015492214713707534657162937963088592442157834795391917</span><br><span class="hljs-comment"># p = 10028729313926419703025256508152026623108338149091078764973884312717908184535793132629646141453659427095349436587466628835078575518082248569520191060305909</span><br><span class="hljs-comment"># q = 13281503606147647246708380767428957306516210204292257132138079387068505557520151605985669600345608943780007813758130736816723511421069886664561045223935011</span><br></code></pre></td></tr></table></figure><p>part2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl.sm4 <span class="hljs-keyword">import</span> CryptSM4, SM4_DECRYPT<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> *<br><br>r = <span class="hljs-number">7166351305785506670352015492214713707534657162937963088592442157834795391917</span><br>p = <span class="hljs-number">10028729313926419703025256508152026623108338149091078764973884312717908184535793132629646141453659427095349436587466628835078575518082248569520191060305909</span><br>q = <span class="hljs-number">13281503606147647246708380767428957306516210204292257132138079387068505557520151605985669600345608943780007813758130736816723511421069886664561045223935011</span><br>c = <span class="hljs-string">&#x27;476922b694c764725338cca99d99c7471ec448d6bf60de797eb7cc6e71253221035eb577075f9658ac7f1a40747778ac261787baad21ee567256872fa9400c37&#x27;</span><br><br>leak=p*q*r<br>r_bytes = long_to_bytes(leak)<br>iv = r_bytes[:<span class="hljs-number">16</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r_bytes) &gt;= <span class="hljs-number">16</span> <span class="hljs-keyword">else</span> r_bytes + <span class="hljs-string">b&#x27;\0&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(r_bytes))<br>key = sha256(<span class="hljs-built_in">str</span>(p + q + r).encode()).digest()[:<span class="hljs-number">16</span>] <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iv:&quot;</span>, iv)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key:&quot;</span>, key)<br><br>sm4 = CryptSM4()<br>sm4.set_key(key, SM4_DECRYPT)<br><br>decrypted_padded_flag = sm4.crypt_cbc(iv, <span class="hljs-built_in">bytes</span>.fromhex(c))<br>decrypted_flag = unpad(decrypted_padded_flag, <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的flag:&quot;</span>, decrypted_flag)<br><span class="hljs-comment"># b&#x27;H&amp;NCTF&#123;ac354aae-cb6b-4bd1-a9cd-090812b8f93e&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="three-vertical-lines">three vertical lines</h2><p>参考<ahref="https://github.com/Cryptonite-MIT/niteCTF-2024/blob/main/crypto/R%20Stands%20Alone/solution/solve.py">niteCTF-2024/crypto/RStands Alone/solution/solve.py at main · Cryptonite-MIT/niteCTF-2024 ·GitHub</a></p><p>形如<spanclass="math inline"><em>a</em> * <em>p</em><sup><em>c</em></sup> + <em>b</em> * <em>q</em><sup><em>d</em></sup> = <em>r</em></span>的均可如此进行，在modr 的基础上得到p/q的值，然后进行规约</p><p><span class="math inline">$\begin{pmatrix}q &amp; 0\end{pmatrix}*\begin{pmatrix}1 &amp; p/q \\ 0 &amp;hint\end{pmatrix}=\begin{pmatrix}q &amp; p \end{pmatrix}$</span></p><p><span class="math inline">$\begin{pmatrix}1 &amp; p/q \\0 &amp;hint\end{pmatrix}$</span>的det为hint，<span class="math inline">$\sqrt n*det(L)^{1/n}=\sqrt {2 * hint}$</span>远大于 <spanclass="math inline">$\begin{pmatrix}q &amp;p\end{pmatrix}$</span>的长度，符合Hermite定理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>hint = <span class="hljs-number">72063558451087451183203801132459543552092564094711815404066471440396765744526854383117910805713050240067432476705168314622044706081669935956972031037827580519320550326077291392722314265758802332280697884744792689996718961355845963752788234205565249205191648439412084543163083032775054018324646541875754706761793307667356964825613429368358849530455220484128264690354330356861777561511117</span><br>c = <span class="hljs-number">2864901454060087890623075705953001126417241189889895476561381971868301515757296100356013797346138819690091860054965586977737630238293536281745826901578223</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># hint = 3*p**5 + 4*q**5</span><br><span class="hljs-comment"># 3*(p/q)**5 + 4 = 0 mod hint</span><br>PF = Zmod(hint)<br>PR = PolynomialRing(PF, <span class="hljs-string">&#x27;x&#x27;</span>)<br>x = PR.gen()<br>f = <span class="hljs-number">3</span>*x**<span class="hljs-number">5</span> + <span class="hljs-number">4</span><br>root = f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>M = matrix(ZZ,[<br>              [<span class="hljs-number">1</span>,root],<br>              [<span class="hljs-number">0</span>,hint]])<br><br>p,q = M.LLL()[<span class="hljs-number">0</span>]<br>p,q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">abs</span>(p)),<span class="hljs-built_in">int</span>(<span class="hljs-built_in">abs</span>(q))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),p*q)))<br><span class="hljs-comment"># b&#x27;H&amp;NCTF&#123;You_learned_the_code_well&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三届黄河流域公安院校网络空间安全技能挑战赛</title>
    <link href="/2025/09/23/%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%85%AC%E5%AE%89%E9%99%A2%E6%A0%A1%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2025/09/23/%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%85%AC%E5%AE%89%E9%99%A2%E6%A0%A1%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="sandwitch">Sandwitch</h2><p>简单padding的coppersmith</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span><br>c = <span class="hljs-number">58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span><br>e = <span class="hljs-number">3</span><br><br>pad1 = <span class="hljs-string">b&#x27;easy_problem&#x27;</span><br>pad2 = <span class="hljs-string">b&#x27;How_to_solve_it&#x27;</span><br><br>P.&lt;x&gt; = PolynomialRing(Zmod(n))<br><br>f = ((bytes_to_long(pad1)*<span class="hljs-number">2</span>^(<span class="hljs-number">15</span>*<span class="hljs-number">8</span>+<span class="hljs-number">39</span>*<span class="hljs-number">8</span>)+x*<span class="hljs-number">2</span>^(<span class="hljs-number">15</span>*<span class="hljs-number">8</span>)+bytes_to_long(pad2))^e - c).monic()<br><br>roots = f.small_roots(X=<span class="hljs-number">2</span>^(<span class="hljs-number">39</span>*<span class="hljs-number">8</span>),beta=<span class="hljs-number">0.5</span>,epsilon=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])))<br><span class="hljs-comment"># b&#x27;flag&#123;A_C0pper5mi1tH_4Ues7iOn_SplIt_Pad&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="因式分解">因式分解</h2><p>tellasecret.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> hint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> encrypt<br><span class="hljs-keyword">import</span> random<br><br>dicts = string.ascii_lowercase +<span class="hljs-string">&quot;&#123;=&#125;&quot;</span><br>key = (<span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(dicts) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])) * <span class="hljs-number">8</span><br><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(hint) == <span class="hljs-number">32</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(key) == <span class="hljs-number">32</span>)<br><br>cipher = encrypt(hint, key) <span class="hljs-comment"># vigenere</span><br><span class="hljs-built_in">print</span>(cipher)<br><br><span class="hljs-comment"># cp=wmaunapgimjfpopeblvup=aywqygb</span><br></code></pre></td></tr></table></figure><p>维吉尼亚解密，使用itertools的product(可重复遍历组合)而不是combination(不可重复遍历组合)，对结果搜索<code>tellasecret</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br>dicts = string.ascii_lowercase +<span class="hljs-string">&quot;&#123;=&#125;&quot;</span><br>dicts1 = &#123;i:index <span class="hljs-keyword">for</span> index,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dicts)&#125;<br>dicts2 = &#123;index:i <span class="hljs-keyword">for</span> index,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dicts)&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vigenere_decrypt</span>(<span class="hljs-params">cipher, key</span>):<br>    message = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>        message += dicts2[(dicts1[cipher[i]] - dicts1[key[i]]) % <span class="hljs-built_in">len</span>(dicts)]<br>    <span class="hljs-keyword">return</span> message<br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;cp=wmaunapgimjfpopeblvup=aywqygb&#x27;</span><br><br>keys = itertools.product(dicts, repeat=<span class="hljs-number">4</span>)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> keys:<br>    key = <span class="hljs-string">&#x27;&#x27;</span>.join(k)*<span class="hljs-number">8</span><br>    message = vigenere_decrypt(<span class="hljs-built_in">str</span>, key)<br>    <span class="hljs-built_in">print</span>(message,file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))<br><br><span class="hljs-comment"># tellasecret&#123;a=secert&#125;keepsilentt</span><br></code></pre></td></tr></table></figure><p>因式分解.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,a,b,c<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>_q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(q)[<span class="hljs-number">2</span>:][::-<span class="hljs-number">1</span>] , <span class="hljs-number">2</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span><br><span class="hljs-string">c = 6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">assert</span> a**<span class="hljs-number">3</span>+b**<span class="hljs-number">3</span>+c**<span class="hljs-number">3</span> == <span class="hljs-number">3</span>*a*b*c<br>gift = secert**<span class="hljs-number">3</span> - <span class="hljs-number">9</span>*secert + <span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(gift)<br><br><span class="hljs-keyword">assert</span> <span class="hljs-number">3</span>*(p ^ _q) == a + b + c<br><br><span class="hljs-comment">#16174454302590604301534105361719250538317088773024913985896374029052621214070408075926265229111851489902642328975085914458074453963086159246933939207642987161923181946601656883349077418380372857072224674380642689142603970810010050</span><br></code></pre></td></tr></table></figure><p>解方程得到secret，即得到a，又<code>assert a**3+b**3+c**3 == 3*a*b*c</code>-》a=b=c-&gt;p^_q=a，剪枝得p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br>g = <span class="hljs-number">16174454302590604301534105361719250538317088773024913985896374029052621214070408075926265229111851489902642328975085914458074453963086159246933939207642987161923181946601656883349077418380372857072224674380642689142603970810010050</span><br>a = sympy.Symbol(<span class="hljs-string">&#x27;a&#x27;</span>)<br>f = a**<span class="hljs-number">3</span> - <span class="hljs-number">9</span>*a + <span class="hljs-number">8</span> - g<br>result = sympy.solve([f],[a])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span><br>c = <span class="hljs-number">6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span><br><br>p0_q = result<br>test = <span class="hljs-built_in">bin</span>(p0_q)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">256</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">ph,qh,pl,ql</span>):<br>    l = <span class="hljs-built_in">len</span>(ph)<br>    tmp0 = <span class="hljs-built_in">int</span>(ph + <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">256</span>-<span class="hljs-number">2</span>*l) + pl, <span class="hljs-number">2</span>)<br>    tmp1 = <span class="hljs-built_in">int</span>(ph + <span class="hljs-string">&#x27;1&#x27;</span>*(<span class="hljs-number">256</span>-<span class="hljs-number">2</span>*l) + pl, <span class="hljs-number">2</span>)<br><br>    tmq0 = <span class="hljs-built_in">int</span>(qh + <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">256</span>-<span class="hljs-number">2</span>*l) + ql, <span class="hljs-number">2</span>)<br>    tmq1 = <span class="hljs-built_in">int</span>(qh + <span class="hljs-string">&#x27;1&#x27;</span>*(<span class="hljs-number">256</span>-<span class="hljs-number">2</span>*l) + ql, <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">if</span> tmp0 * tmq0 &gt; n:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> tmp1 * tmq1 &lt; n:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> l&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(pl,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(ql,<span class="hljs-number">2</span>) % <span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>) != n % <span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">if</span> l == <span class="hljs-number">128</span>:<br>        p = tmp0<br>        <span class="hljs-keyword">if</span> n % p == <span class="hljs-number">0</span>:<br>            q = n // p<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),n)))<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> test[l] == <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">and</span> test[<span class="hljs-number">255</span> - l] == <span class="hljs-string">&quot;1&quot;</span>:<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>        <span class="hljs-keyword">elif</span> test[l] == <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">and</span> test[<span class="hljs-number">255</span> - l] == <span class="hljs-string">&quot;0&quot;</span>:<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>        <span class="hljs-keyword">elif</span> test[l] == <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">and</span> test[<span class="hljs-number">255</span> - l] == <span class="hljs-string">&quot;1&quot;</span>:<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>        <span class="hljs-keyword">elif</span> test[l] == <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">and</span> test[<span class="hljs-number">255</span> - l] == <span class="hljs-string">&quot;0&quot;</span>:<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;0&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;0&quot;</span> + ql)<br>            find(ph + <span class="hljs-string">&quot;1&quot;</span>, qh + <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span> + pl, <span class="hljs-string">&quot;1&quot;</span> + ql)<br><br>find(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># b&#x27;flag&#123;80a59062-9bbf-99a3-6af0-a24e94032163&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="lattice">Lattice</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># from secret import flag</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>flag = <span class="hljs-string">b&quot;flag&#123;fake_flag&#125;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">q, n, N, sigma</span>):<br>    t = np.random.randint(<span class="hljs-number">0</span>, high=q // <span class="hljs-number">2</span>, size=n) <br>    s = np.concatenate([np.ones(<span class="hljs-number">1</span>, dtype=np.int32), t]) <br>    A = np.random.randint(<span class="hljs-number">0</span>, high=q // <span class="hljs-number">2</span>, size=(N, n)) <br>    e = np.<span class="hljs-built_in">round</span>(np.random.randn(N) * sigma**<span class="hljs-number">2</span>).astype(np.int32) % q<br>    b = ((np.dot(A, t) + e).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) % q<br>    P = np.hstack([b, -A])<br>    <span class="hljs-keyword">return</span> P, s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">P, M, q</span>):<br>    N = P.shape[<span class="hljs-number">0</span>]<br>    n = <span class="hljs-built_in">len</span>(M)<br>    r = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, (n, N))<br>    Z = np.zeros((n, P.shape[<span class="hljs-number">1</span>]), dtype=np.int32)<br>    Z[:, <span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    C = np.zeros((n, P.shape[<span class="hljs-number">1</span>]), dtype=np.int32)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        C[i] = (np.dot(P.T, r[i]) + (np.floor(q / <span class="hljs-number">2</span>) * Z[i] * M[i])) % q<br>    <span class="hljs-keyword">return</span> C<br><br>q = <span class="hljs-number">127</span><br>n = <span class="hljs-number">3</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-number">1.1</span> * n * np.log(q))<br>sigma = <span class="hljs-number">1.0</span><br><br>P, s = gen(q, n, N, sigma)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> np.array([<span class="hljs-built_in">int</span>(b) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">ord</span>(char):08b&#125;</span>&quot;</span>], dtype=np.int32)<br><br>hint = <br>C = enc(P, prep(hint), q)<br>P = P.tolist()<br>C = C.tolist()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;P=&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;C=&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">P=[]</span><br><span class="hljs-string">C=[]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>iv = <br>key = os.urandom(<span class="hljs-number">16</span>)<br>encrypted = AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(<span class="hljs-string">b&quot;&quot;</span>.join([np.pad(i.encode(), <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag]))<br><br>leak = <br><span class="hljs-built_in">print</span>(leak)<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-built_in">print</span>(encrypted)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-3.257518803980229925210589904230583482986646342139415561576950148286382674434770529248486501793457710730252401258721482142654716015216299244487794967600132597049154513815052213387666360825101667524635777006510550117512116441539852315185793280311905620746025669520152068447372368293640072502196959919309286241</span><br><span class="hljs-string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span><br><span class="hljs-string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="解法一">解法一</h3><p>第一段：LWE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># ====slove_t====</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Babai</span>(<span class="hljs-params">B, t</span>):<br>    B = IntegerLattice(B, lll_reduce=<span class="hljs-literal">True</span>).reduced_basis<br>    G = B.gram_schmidt()[<span class="hljs-number">0</span>]<br>    b = t<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(B.ncols())):<br>        b -=  B[i] * ((b * G[i]) / (G[i] * G[i])).<span class="hljs-built_in">round</span>()<br>    <span class="hljs-keyword">return</span> t - b<br><br>P=[[<span class="hljs-number">87</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">52</span>, -<span class="hljs-number">29</span>], [<span class="hljs-number">57</span>, -<span class="hljs-number">41</span>, -<span class="hljs-number">24</span>, -<span class="hljs-number">60</span>], [<span class="hljs-number">76</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">55</span>, -<span class="hljs-number">37</span>], [<span class="hljs-number">75</span>, -<span class="hljs-number">46</span>, -<span class="hljs-number">33</span>, -<span class="hljs-number">21</span>], [<span class="hljs-number">121</span>, -<span class="hljs-number">55</span>, -<span class="hljs-number">33</span>, -<span class="hljs-number">34</span>], [<span class="hljs-number">47</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">34</span>, -<span class="hljs-number">45</span>], [<span class="hljs-number">112</span>, -<span class="hljs-number">33</span>, -<span class="hljs-number">44</span>, -<span class="hljs-number">16</span>], [<span class="hljs-number">74</span>, -<span class="hljs-number">44</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">25</span>], [<span class="hljs-number">20</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">49</span>], [<span class="hljs-number">89</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">54</span>, -<span class="hljs-number">24</span>], [<span class="hljs-number">18</span>, -<span class="hljs-number">23</span>, -<span class="hljs-number">53</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">35</span>, -<span class="hljs-number">40</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">29</span>], [<span class="hljs-number">105</span>, -<span class="hljs-number">54</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">8</span>], [<span class="hljs-number">44</span>, -<span class="hljs-number">24</span>, -<span class="hljs-number">43</span>, -<span class="hljs-number">36</span>], [<span class="hljs-number">111</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">54</span>]]<br>P = np.array(P)<br>A_list= <span class="hljs-built_in">list</span>(-P[:,<span class="hljs-number">1</span>:])<br>b_list= <span class="hljs-built_in">list</span>(P[:,<span class="hljs-number">0</span>])<br>q = <span class="hljs-number">127</span> <br><br><span class="hljs-comment"># b = A*x+e mod q</span><br>A = matrix(ZZ, A_list)<br>b = vector(ZZ, b_list)<br>r = A.nrows()<br>c = A.ncols()<br><br>pIr = q*identity_matrix(r)<br>M = block_matrix([[pIr], [A.transpose()]])  <br>br = Babai(M, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;b-br&#125;</span>&#x27;</span>)<br>R = IntegerModRing(q)<br>Ar = matrix(R, A_list)<br>t = Ar.solve_right(br)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;t = <span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br>s = np.concatenate([np.ones(<span class="hljs-number">1</span>, dtype=np.int32), t])<br><br><span class="hljs-comment"># e = (0, 1, -1, 1, 0, -1, 1, 0, 0, -1, -1, 0, -1, 0, 1)</span><br><span class="hljs-comment"># t = (26, 24, 54)</span><br></code></pre></td></tr></table></figure><p>第二段：hint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># ====slove_hint====</span><br>s = np.concatenate([np.ones(<span class="hljs-number">1</span>, dtype=np.int32), t])<br>C=[]<br>m = <span class="hljs-built_in">list</span>(np.dot(C,s) % q)<br><br>hint=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m: <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i) &gt; q - <span class="hljs-number">15</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(i) &lt; <span class="hljs-number">15</span>:<br>        hint += <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        hint += <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(hint, <span class="hljs-number">2</span>)))<br><span class="hljs-comment"># b&quot;Congratulations,you&#x27;re amazing!Here&#x27;s a hint: sin(iv) + leak * cos(iv) = 0, keep it up! @V@&quot;</span><br></code></pre></td></tr></table></figure><p>第三段：三角格规约求iv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># ====slove_iv====</span><br>t = <span class="hljs-number">3.257518803980229925210589904230583482986646342139415561576950148286382674434770529248486501793457710730252401258721482142654716015216299244487794967600132597049154513815052213387666360825101667524635777006510550117512116441539852315185793280311905620746025669520152068447372368293640072502196959919309286241</span><br>a = arctan(t)<br>ts = <span class="hljs-number">2</span>^<span class="hljs-number">1024</span><br><br>A = <span class="hljs-built_in">int</span>(a*ts)<br>Pi = <span class="hljs-built_in">int</span>((pi).n(<span class="hljs-number">1024</span>)*ts)<br><br>G = Matrix([[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-ts],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(Pi)],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,A]])<br>m = G.LLL()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>iv = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;iv = <span class="hljs-subst">&#123;iv&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># b&#x27;?\xaa =t\xbc\xddQ\xac/yq\x13\xc3\x7f\xb9&#x27;</span><br></code></pre></td></tr></table></figure><p>第四段：AES解密+unpad</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad,unpad<br><br>iv = <span class="hljs-string">b&#x27;?\xaa =t\xbc\xddQ\xac/yq\x13\xc3\x7f\xb9&#x27;</span><br>key = <span class="hljs-string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span><br>c = <span class="hljs-string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span><br>aes = AES.new(key=key, iv=iv, mode=AES.MODE_CBC)<br>m = aes.decrypt(c)<br>mm = [m[i:i + <span class="hljs-number">16</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(m), <span class="hljs-number">16</span>)]<br>flag = <span class="hljs-string">b&#x27;&#x27;</span>.join([unpad(i, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mm])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># b&#x27;flag&#123;6ef25d1e-bb76-8e53-dbc4-1e56585f9aa9&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="解法二">解法二</h3><p>CBC的特征+flag的第一个字符f被pad为16位，直接异或出iv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>encrypted = <span class="hljs-string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span><br><br>message_pad = pad(<span class="hljs-string">b&#x27;f&#x27;</span>, <span class="hljs-number">16</span>)<br>key = <span class="hljs-string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span><br><br>myaes = AES.new(key, AES.MODE_ECB)<br><br>iv = <span class="hljs-built_in">bytes</span>([a^b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(myaes.decrypt(encrypted[:<span class="hljs-number">16</span>]), message_pad)])<br><span class="hljs-built_in">print</span>(iv)<br>c = <span class="hljs-string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span><br>key = <span class="hljs-string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span><br>myaes = AES.new(key=key, iv=iv, mode=AES.MODE_CBC)<br><br>decrypted_bytes = myaes.decrypt(c)<br><span class="hljs-comment"># print(decrypted_bytes)</span><br>messages = [decrypted_bytes[i:i + <span class="hljs-number">16</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(decrypted_bytes), <span class="hljs-number">16</span>)]<br>flag = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(message[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> messages])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag&#123;6ef25d1e-bb76-8e53-dbc4-1e56585f9aa9&#125;</span><br></code></pre></td></tr></table></figure><h2 id="happy">Happy</h2><p>task.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># Simplify the problem by happy4321</span><br><span class="hljs-keyword">import</span> os, utils<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;flag&#123;&#x27;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br><br>seed = <span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">16</span>).<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>gen = utils.Gen(seed)<br>msg = <span class="hljs-string">b&#x27;Happy4321: &#x27;</span> + flag<br>enc = <span class="hljs-built_in">bytes</span>(m ^ <span class="hljs-built_in">next</span>(gen) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg).<span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment"># cd1dd7c7a9cfe3c0067ff64694e64c38aa759c81d1c8f48cf6f7ee1df2d1e58584da52644ea56bd24dadca6bd5a6899a92b118f57de2529670264d48</span><br></code></pre></td></tr></table></figure><p>utils.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gen</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state</span>):<br>        <span class="hljs-variable language_">self</span>.nbits = <span class="hljs-number">128</span><br>        <span class="hljs-variable language_">self</span>.state = state &amp; ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-variable language_">self</span>.nbits) - <span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.mask = <span class="hljs-number">109908700282042807039366676242995409413</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func0</span>(<span class="hljs-params">self, steps=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(steps):<br>            res = <span class="hljs-variable language_">self</span>.state &amp; <span class="hljs-variable language_">self</span>.mask<br>            bit = <span class="hljs-built_in">sum</span>([(res &gt;&gt; i) &amp; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.nbits)]) &amp; <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.state = ((<span class="hljs-variable language_">self</span>.state &lt;&lt; <span class="hljs-number">1</span>) ^ bit) &amp; ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-variable language_">self</span>.nbits) - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> bit<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        out = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            bit = <span class="hljs-variable language_">self</span>.func0(<span class="hljs-number">2023</span>)<br>            out = (out &lt;&lt; <span class="hljs-number">1</span>) ^ bit<br>        <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><p>Analyse:</p><p>seed转换为1x128的矩阵</p><p>则变换矩阵为含mask的128x128矩阵，在GF(2)上有：</p><p><span class="math display">$$\begin{bmatrix}state_n \\\end{bmatrix}\begin{bmatrix}O &amp; mask_0 \\I &amp; mask_{1+} \\\end{bmatrix}=\begin{bmatrix}state_{n+1} \\\end{bmatrix}$$</span> Exp:</p><p>(直接把class Gen复制进来跑出来的是乱码😕)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath 10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>enc = <span class="hljs-string">&#x27;cd1dd7c7a9cfe3c0067ff64694e64c38aa759c81d1c8f48cf6f7ee1df2d1e58584da52644ea56bd24dadca6bd5a6899a92b118f57de2529670264d48&#x27;</span><br>mask = <span class="hljs-number">109908700282042807039366676242995409413</span><br><br>flag_know = <span class="hljs-string">b&#x27;Happy4321: flag&#123;&#x27;</span><br>enc_know = <span class="hljs-built_in">bytes</span>.fromhex(enc)[:<span class="hljs-number">16</span>]<br><br>leak = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [a^^b <span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(flag_know,enc_know)]])<br>mask = <span class="hljs-built_in">bin</span>(mask)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">128</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_seed</span>(<span class="hljs-params">leak,mask</span>):<br>    change_m = matrix(GF(<span class="hljs-number">2</span>),<span class="hljs-number">128</span>,<span class="hljs-number">128</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>        change_m[i+<span class="hljs-number">1</span>,i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>        change_m[i,-<span class="hljs-number">1</span>] = mask[i]<br><br>    M = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>*<span class="hljs-number">8</span>):<br>        M.append((change_m ^ (<span class="hljs-number">2023</span>*(i+<span class="hljs-number">1</span>))).T[-<span class="hljs-number">1</span>].<span class="hljs-built_in">list</span>())<br><br>    seed = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,(matrix(GF(<span class="hljs-number">2</span>),<span class="hljs-built_in">list</span>(leak)) / matrix(GF(<span class="hljs-number">2</span>),M).T).<span class="hljs-built_in">list</span>()))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(seed,<span class="hljs-number">2</span>)<br><br>seed = get_seed(leak,mask)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;seed = <span class="hljs-subst">&#123;seed&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">import</span> utils<br>gen = utils.Gen(seed)<br>enc = <span class="hljs-built_in">bytes</span>.fromhex(enc)<br><br>flag = <span class="hljs-built_in">bytes</span>(e ^^ <span class="hljs-built_in">next</span>(gen) <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> enc)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># Happy4321: flag&#123;The_matrix_is_as_charming_as_the_starry_sky&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
